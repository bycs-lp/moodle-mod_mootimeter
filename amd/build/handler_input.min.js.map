{"version":3,"file":"handler_input.min.js","sources":["../src/handler_input.js"],"sourcesContent":["import {call as fetchMany} from 'core/ajax';\nimport Log from 'core/log';\n\nexport const init = (uniqueID) => {\n    const obj = document.getElementById(uniqueID);\n\n    if (!document.getElementById(uniqueID)) {\n        return;\n    }\n\n    obj.addEventListener(\"keyup\", mootimeterStoreInput);\n\n    /**\n     * Store the value.\n     */\n    function mootimeterStoreInput() {\n        const id = this.id;\n        const pageid = this.dataset.pageid;\n        const ajaxmethod = this.dataset.ajaxmethod;\n        const inputname = this.dataset.name;\n        const inputvalue = document.getElementById(id).value;\n        const thisDataset = JSON.stringify(this.dataset);\n        return execStoreInputValue(ajaxmethod, pageid, inputname, inputvalue, thisDataset);\n    }\n};\n\n/**\n * Call to store input value\n * @param {string} ajaxmethod\n * @param {int} pageid\n * @param {string} inputname\n * @param {string} inputvalue\n * @param {string} thisDataset\n * @returns\n */\nconst storeInputValue = (\n    ajaxmethod,\n    pageid,\n    inputname,\n    inputvalue,\n    thisDataset\n) => fetchMany([{\n    methodname: ajaxmethod,\n    args: {\n        pageid,\n        inputname,\n        inputvalue,\n        thisDataset\n    },\n}])[0];\n\n/**\n * Executes the call to store input value.\n * @param {string} ajaxmethod\n * @param {int} pageid\n * @param {string} inputname\n * @param {string} inputvalue\n * @param {string} thisDataset\n */\nconst execStoreInputValue = async(ajaxmethod, pageid, inputname, inputvalue, thisDataset) => {\n    const response = await storeInputValue(ajaxmethod, pageid, inputname, inputvalue, thisDataset);\n    if (response.code != 200) {\n        Log.error(response.string);\n    }\n    if (response.code == 200) {\n        Log.info(response.string);\n    }\n};"],"names":["uniqueID","obj","document","getElementById","addEventListener","id","this","pageid","dataset","ajaxmethod","inputname","name","inputvalue","value","thisDataset","JSON","stringify","execStoreInputValue","async","response","methodname","args","storeInputValue","code","error","string","info"],"mappings":"6PAGqBA,iBACXC,IAAMC,SAASC,eAAeH,UAE/BE,SAASC,eAAeH,WAI7BC,IAAIG,iBAAiB,0BAMXC,GAAKC,KAAKD,GACVE,OAASD,KAAKE,QAAQD,OACtBE,WAAaH,KAAKE,QAAQC,WAC1BC,UAAYJ,KAAKE,QAAQG,KACzBC,WAAaV,SAASC,eAAeE,IAAIQ,MACzCC,YAAcC,KAAKC,UAAUV,KAAKE,gBACjCS,oBAAoBR,WAAYF,OAAQG,UAAWE,WAAYE,uBAqCxEG,oBAAsBC,MAAMT,WAAYF,OAAQG,UAAWE,WAAYE,qBACnEK,cAzBc,EACpBV,WACAF,OACAG,UACAE,WACAE,eACC,cAAU,CAAC,CACZM,WAAYX,WACZY,KAAM,CACFd,cACAG,oBACAE,sBACAE,4BAEJ,GAWuBQ,CAAgBb,WAAYF,OAAQG,UAAWE,WAAYE,aAC7D,KAAjBK,SAASI,mBACLC,MAAML,SAASM,QAEF,KAAjBN,SAASI,mBACLG,KAAKP,SAASM"}