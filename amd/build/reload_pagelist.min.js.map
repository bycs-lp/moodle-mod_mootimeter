{"version":3,"file":"reload_pagelist.min.js","sources":["../src/reload_pagelist.js"],"sourcesContent":["import {call as fetchMany} from 'core/ajax';\nimport Log from 'core/log';\nimport {exception as displayException} from 'core/notification';\nimport Templates from 'core/templates';\nimport {execReloadPage as reloadPage} from 'mod_mootimeter/reload_page';\nimport SortableList from 'core/sortable_list';\nimport jQuery from 'jquery';\nimport {ajaxRequestInput} from 'mod_mootimeter/utils';\n\nexport const init = () => {\n    var obj = document.getElementById('mootimeterstate');\n\n    if (!obj) {\n        return;\n    }\n\n    setInterval(() => {\n        getPagelist();\n    }, 5000);\n\n    const queryString = window.location.search;\n    const urlParams = new URLSearchParams(queryString);\n    const cmid = urlParams.get('id');\n    var pageid = urlParams.get('pageid');\n\n    if (pageid === null || pageid === undefined || pageid.length == 0) {\n        pageid = 0;\n    }\n    reloadPage(pageid, cmid, '');\n\n    /**\n     * Store the value.\n     */\n    function getPagelist() {\n        var pageid = 0;\n\n        if (document.getElementById('mootimeterstate').dataset.pageid) {\n            pageid = document.getElementById('mootimeterstate').dataset.pageid;\n            if (pageid == \"undefined\" || pageid.length == 0) {\n                pageid = 0;\n            }\n        }\n\n        const queryString = window.location.search;\n        const urlParams = new URLSearchParams(queryString);\n        const cmid = urlParams.get('id');\n        execReloadPagelist(pageid, cmid);\n    }\n};\n\n/**\n * Call to store input value\n * @param {int} pageid\n * @param {int} cmid\n * @returns {array}\n */\nconst reloadPagelist = (\n    pageid,\n    cmid\n) => fetchMany([{\n    methodname: 'mod_mootimeter_get_pages_list',\n    args: {\n        pageid,\n        cmid\n    },\n}])[0];\n\n/**\n * Executes the call to store input value.\n * @param {int} pageid\n * @param {int} cmid\n * @param {bool} forcereload\n */\nexport const execReloadPagelist = async(pageid, cmid, forcereload = false) => {\n    const response = await reloadPagelist(pageid, cmid);\n\n    if (response.code != 200) {\n        Log.error(response.string);\n    }\n\n    if (response.code == 200) {\n\n        var mtmstate = document.getElementById('mootimeterstate');\n\n        const pagelist = JSON.parse(response.pagelist);\n        const loadpageid = pagelist.loadpageid;\n\n        // Reload pagecontent if page does not exit any more.\n        if (pagelist.loadpageid) {\n            reloadPage(loadpageid, cmid, '');\n        }\n\n        // If there are no changes in pagelist. We are finished.\n        if (mtmstate.dataset.pagelisttime == pagelist.pagelisttime && !forcereload) {\n            return;\n        }\n\n        // Set new pagelisttime state.\n        mtmstate.setAttribute('data-pagelisttime', pagelist.pagelisttime);\n\n        // Replace the pages list.\n        Templates.renderForPromise('mod_mootimeter/elements/snippet_page_list', pagelist)\n            .then(({html, js}) => {\n                if (document.getElementById('mootimeter-addpage-button')) {\n                    document.getElementById('mootimeter-addpage-button').remove();\n                }\n                Templates.replaceNode(document.getElementById('mootimeter-pages-list'), html, js);\n\n                // Finally make pageslist sortable.\n                var listelements = document.getElementsByClassName('mootimeter_pages_li');\n                if (listelements[0]) {\n                    var uniqid = listelements[0].dataset.uniqid;\n                    new SortableList('#mootimeter-pages-list', {\n                        moveHandlerSelector: '.mootimeter_page_move_sortablehandle_' + uniqid,\n                    });\n                    jQuery('.mootimeter_pages_li_sortable_' + uniqid).on(SortableList.EVENTS.DROP, function(_, info) {\n                        var newIndex = info.targetList.children().index(info.element);\n                        storePagePosition(this.dataset.pageid, newIndex);\n                    });\n                }\n\n                // Remove all tooltips of pageslist that are still present.\n                document.querySelectorAll('.tooltip').forEach(e => e.remove());\n\n                return true;\n            })\n            .catch((error) => displayException(error));\n    }\n};\n\n/**\n * Store the new page position.\n * @param {int} pageid\n * @param {int} newIndex\n */\nconst storePagePosition = (pageid, newIndex) => {\n    ajaxRequestInput(\n        'mod_mootimeter_store_page_details',\n        pageid,\n        'sortorder',\n        newIndex,\n        ''\n    );\n};"],"names":["document","getElementById","setInterval","pageid","dataset","length","queryString","window","location","search","cmid","URLSearchParams","get","execReloadPagelist","getPagelist","urlParams","reloadPagelist","methodname","args","async","forcereload","response","code","error","string","mtmstate","pagelist","JSON","parse","loadpageid","pagelisttime","setAttribute","renderForPromise","then","_ref","html","js","remove","replaceNode","listelements","getElementsByClassName","uniqid","SortableList","moveHandlerSelector","on","EVENTS","DROP","_","info","newIndex","targetList","children","index","element","storePagePosition","this","querySelectorAll","forEach","e","catch"],"mappings":"4pBASoB,SACNA,SAASC,eAAe,0BAMlCC,aAAY,qBAkBJC,OAAS,EAETH,SAASC,eAAe,mBAAmBG,QAAQD,SAErC,cADdA,OAASH,SAASC,eAAe,mBAAmBG,QAAQD,SACd,GAAjBA,OAAOE,SAChCF,OAAS,UAIXG,YAAcC,OAAOC,SAASC,OAE9BC,KADY,IAAIC,gBAAgBL,aACfM,IAAI,MAC3BC,mBAAmBV,OAAQO,MA7B3BI,KACD,WAEGR,YAAcC,OAAOC,SAASC,OAC9BM,UAAY,IAAIJ,gBAAgBL,aAChCI,KAAOK,UAAUH,IAAI,UACvBT,OAASY,UAAUH,IAAI,UAEvBT,MAAAA,QAA4D,GAAjBA,OAAOE,SAClDF,OAAS,mCAEFA,OAAQO,KAAM,WA4BvBM,eAAiB,CACnBb,OACAO,QACC,cAAU,CAAC,CACZO,WAAY,gCACZC,KAAM,CACFf,OAAAA,OACAO,KAAAA,SAEJ,GAQSG,mBAAqBM,eAAMhB,OAAQO,UAAMU,0EAC5CC,eAAiBL,eAAeb,OAAQO,SAEzB,KAAjBW,SAASC,mBACLC,MAAMF,SAASG,QAGF,KAAjBH,SAASC,KAAa,KAElBG,SAAWzB,SAASC,eAAe,yBAEjCyB,SAAWC,KAAKC,MAAMP,SAASK,UAC/BG,WAAaH,SAASG,cAGxBH,SAASG,4CACEA,WAAYnB,KAAM,IAI7Be,SAASrB,QAAQ0B,cAAgBJ,SAASI,eAAiBV,mBAK/DK,SAASM,aAAa,oBAAqBL,SAASI,iCAG1CE,iBAAiB,4CAA6CN,UACnEO,MAAKC,WAACC,KAACA,KAADC,GAAOA,SACNpC,SAASC,eAAe,8BACxBD,SAASC,eAAe,6BAA6BoC,4BAE/CC,YAAYtC,SAASC,eAAe,yBAA0BkC,KAAMC,QAG1EG,aAAevC,SAASwC,uBAAuB,0BAC/CD,aAAa,GAAI,KACbE,OAASF,aAAa,GAAGnC,QAAQqC,WACjCC,uBAAa,yBAA0B,CACvCC,oBAAqB,wCAA0CF,6BAE5D,iCAAmCA,QAAQG,GAAGF,uBAAaG,OAAOC,MAAM,SAASC,EAAGC,UACnFC,SAAWD,KAAKE,WAAWC,WAAWC,MAAMJ,KAAKK,SACrDC,kBAAkBC,KAAKnD,QAAQD,OAAQ8C,oBAK/CjD,SAASwD,iBAAiB,YAAYC,SAAQC,GAAKA,EAAErB,YAE9C,KAEVsB,OAAOpC,QAAU,2BAAiBA,gEASzC+B,kBAAoB,CAACnD,OAAQ8C,wCAE3B,oCACA9C,OACA,YACA8C,SACA"}