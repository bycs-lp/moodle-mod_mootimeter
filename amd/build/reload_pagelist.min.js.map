{"version":3,"file":"reload_pagelist.min.js","sources":["../src/reload_pagelist.js"],"sourcesContent":["import {call as fetchMany} from 'core/ajax';\nimport Log from 'core/log';\nimport {exception as displayException} from 'core/notification';\nimport Templates from 'core/templates';\nimport {execReloadPage as reloadPage} from 'mod_mootimeter/reload_page';\nimport SortableList from 'core/sortable_list';\nimport jQuery from 'jquery';\nimport {ajaxRequestInput} from 'mod_mootimeter/utils';\n\nexport const init = (pagerefreshintervall) => {\n    var obj = document.getElementById('mootimeterstate');\n\n    if (!obj) {\n        return;\n    }\n\n    if (pagerefreshintervall < 500) {\n        pagerefreshintervall = 500;\n    }\n\n    setInterval(() => {\n        getPagelist();\n    }, pagerefreshintervall);\n\n    const queryString = window.location.search;\n    const urlParams = new URLSearchParams(queryString);\n    const cmid = urlParams.get('id');\n    var pageid = urlParams.get('pageid');\n\n    if (pageid === null || pageid === undefined || pageid.length == 0) {\n        pageid = 0;\n    }\n    reloadPage(pageid, cmid, '');\n\n    /**\n     * Store the value.\n     */\n    function getPagelist() {\n        var pageid = 0;\n\n        if (document.getElementById('mootimeterstate').dataset.pageid) {\n            pageid = document.getElementById('mootimeterstate').dataset.pageid;\n            if (pageid == \"undefined\" || pageid.length == 0) {\n                pageid = 0;\n            }\n        }\n\n        const queryString = window.location.search;\n        const urlParams = new URLSearchParams(queryString);\n        const cmid = urlParams.get('id');\n        execReloadPagelist(pageid, cmid);\n    }\n};\n\n/**\n * Call to store input value\n * @param {int} pageid\n * @param {int} cmid\n * @param {string} dataset\n * @returns {array}\n */\nconst reloadPagelist = (\n    pageid,\n    cmid,\n    dataset\n) => fetchMany([{\n    methodname: 'mod_mootimeter_get_pages_list',\n    args: {\n        pageid,\n        cmid,\n        dataset\n    },\n}])[0];\n\n/**\n * Executes the call to store input value.\n * @param {int} pageid\n * @param {int} cmid\n * @param {bool} forcereload\n */\nexport const execReloadPagelist = async(pageid, cmid, forcereload = false) => {\n    var mtmstate = document.getElementById('mootimeterstate');\n    var dataset = mtmstate.dataset;\n    const queryString = window.location.search;\n    const urlParams = new URLSearchParams(queryString);\n\n    if (urlParams.get('r')) {\n        dataset.r = urlParams.get('r');\n    }\n\n    if (urlParams.get('o')) {\n        dataset.o = urlParams.get('o');\n    }\n\n    dataset.useUrlParams = 1;\n\n    const response = await reloadPagelist(pageid, cmid, JSON.stringify(dataset));\n\n    if (response.code != 200) {\n        Log.error(response.string);\n    }\n\n    if (response.code == 200) {\n\n        const pagelist = JSON.parse(response.pagelist);\n        const loadpageid = pagelist.loadpageid;\n\n        // Reload pagecontent if page does not exit any more.\n        if (pagelist.loadpageid) {\n            reloadPage(loadpageid, cmid, '');\n        }\n\n        // Reload page if teacherpermission to view changed.\n        if (\n            mtmstate.getAttribute('data-teacherpermissiontoview')\n            && mtmstate.getAttribute('data-teacherpermissiontoview') != pagelist.dataset['teacherpermissiontoview']\n        ) {\n            reloadPage(mtmstate.getAttribute('data-pageid'), cmid, '');\n        }\n\n        // Set all datasets to mootimeterstate.\n        for (let dataattribute in pagelist.dataset) {\n            if (pagelist.dataset.hasOwnProperty(dataattribute)) {\n                mtmstate.setAttribute('data-' + dataattribute, pagelist.dataset[dataattribute]);\n            }\n        }\n\n        // If there are no changes in pagelist. We are finished.\n        if (mtmstate.dataset.pagelisttime == pagelist.dataset.pagelisttime && !forcereload) {\n            return;\n        }\n\n        // Set new pagelisttime state.\n\n        // Replace the pages list.\n        Templates.renderForPromise('mod_mootimeter/elements/snippet_page_list', pagelist)\n            .then(({html, js}) => {\n                if (document.getElementById('mootimeter-addpage-button')) {\n                    document.getElementById('mootimeter-addpage-button').remove();\n                }\n                Templates.replaceNode(document.getElementById('mootimeter-pages-list'), html, js);\n\n                // Finally make pageslist sortable.\n                var listelements = document.getElementsByClassName('mootimeter_pages_li');\n                if (listelements[0]) {\n                    var uniqid = listelements[0].dataset.uniqid;\n                    new SortableList('#mootimeter-pages-list', {\n                        moveHandlerSelector: '.mootimeter_page_move_sortablehandle_' + uniqid,\n                    });\n                    jQuery('.mootimeter_pages_li_sortable_' + uniqid).on(SortableList.EVENTS.DROP, async function(_, info) {\n                        var newIndex = info.targetList.children().index(info.element);\n                        await storePagePosition(this.dataset.pageid, newIndex);\n                        // We need to reload the pagelist, because the page numbers would not update otherwise.\n                        execReloadPagelist(pageid, cmid, true);\n                    });\n                }\n\n                // Remove all tooltips of pageslist that are still present.\n                document.querySelectorAll('.tooltip').forEach(e => e.remove());\n\n                return true;\n            })\n            .catch((error) => displayException(error));\n    }\n};\n\n/**\n * Store the new page position.\n * @param {int} pageid\n * @param {int} newIndex\n */\nconst storePagePosition = (pageid, newIndex) => {\n    ajaxRequestInput(\n        'mod_mootimeter_store_page_details',\n        pageid,\n        'sortorder',\n        newIndex,\n        ''\n    );\n};\n"],"names":["pagerefreshintervall","document","getElementById","setInterval","pageid","dataset","length","queryString","window","location","search","cmid","URLSearchParams","get","execReloadPagelist","getPagelist","urlParams","reloadPagelist","methodname","args","async","forcereload","mtmstate","r","o","useUrlParams","response","JSON","stringify","code","error","string","pagelist","parse","loadpageid","getAttribute","dataattribute","hasOwnProperty","setAttribute","pagelisttime","renderForPromise","then","_ref","html","js","remove","replaceNode","listelements","getElementsByClassName","uniqid","SortableList","moveHandlerSelector","on","EVENTS","DROP","_","info","newIndex","targetList","children","index","element","storePagePosition","this","querySelectorAll","forEach","e","catch"],"mappings":"4pBASqBA,2BACPC,SAASC,eAAe,0BAM9BF,qBAAuB,MACvBA,qBAAuB,KAG3BG,aAAY,qBAkBJC,OAAS,EAETH,SAASC,eAAe,mBAAmBG,QAAQD,SAErC,cADdA,OAASH,SAASC,eAAe,mBAAmBG,QAAQD,SACd,GAAjBA,OAAOE,SAChCF,OAAS,UAIXG,YAAcC,OAAOC,SAASC,OAE9BC,KADY,IAAIC,gBAAgBL,aACfM,IAAI,MAC3BC,mBAAmBV,OAAQO,MA7B3BI,KACDf,4BAEGO,YAAcC,OAAOC,SAASC,OAC9BM,UAAY,IAAIJ,gBAAgBL,aAChCI,KAAOK,UAAUH,IAAI,UACvBT,OAASY,UAAUH,IAAI,UAEvBT,MAAAA,QAA4D,GAAjBA,OAAOE,SAClDF,OAAS,mCAEFA,OAAQO,KAAM,WA6BvBM,eAAiB,CACnBb,OACAO,KACAN,WACC,cAAU,CAAC,CACZa,WAAY,gCACZC,KAAM,CACFf,OAAAA,OACAO,KAAAA,KACAN,QAAAA,YAEJ,GAQSS,mBAAqBM,eAAMhB,OAAQO,UAAMU,wEAC9CC,SAAWrB,SAASC,eAAe,mBACnCG,QAAUiB,SAASjB,cACjBE,YAAcC,OAAOC,SAASC,OAC9BM,UAAY,IAAIJ,gBAAgBL,aAElCS,UAAUH,IAAI,OACdR,QAAQkB,EAAIP,UAAUH,IAAI,MAG1BG,UAAUH,IAAI,OACdR,QAAQmB,EAAIR,UAAUH,IAAI,MAG9BR,QAAQoB,aAAe,QAEjBC,eAAiBT,eAAeb,OAAQO,KAAMgB,KAAKC,UAAUvB,aAE9C,KAAjBqB,SAASG,mBACLC,MAAMJ,SAASK,QAGF,KAAjBL,SAASG,KAAa,OAEhBG,SAAWL,KAAKM,MAAMP,SAASM,UAC/BE,WAAaF,SAASE,WAGxBF,SAASE,4CACEA,WAAYvB,KAAM,IAK7BW,SAASa,aAAa,iCACnBb,SAASa,aAAa,iCAAmCH,SAAS3B,QAAT,yDAEjDiB,SAASa,aAAa,eAAgBxB,KAAM,QAItD,IAAIyB,iBAAiBJ,SAAS3B,QAC3B2B,SAAS3B,QAAQgC,eAAeD,gBAChCd,SAASgB,aAAa,QAAUF,cAAeJ,SAAS3B,QAAQ+B,mBAKpEd,SAASjB,QAAQkC,cAAgBP,SAAS3B,QAAQkC,eAAiBlB,sCAO7DmB,iBAAiB,4CAA6CR,UACnES,MAAKC,WAACC,KAACA,KAADC,GAAOA,SACN3C,SAASC,eAAe,8BACxBD,SAASC,eAAe,6BAA6B2C,4BAE/CC,YAAY7C,SAASC,eAAe,yBAA0ByC,KAAMC,QAG1EG,aAAe9C,SAAS+C,uBAAuB,0BAC/CD,aAAa,GAAI,KACbE,OAASF,aAAa,GAAG1C,QAAQ4C,WACjCC,uBAAa,yBAA0B,CACvCC,oBAAqB,wCAA0CF,6BAE5D,iCAAmCA,QAAQG,GAAGF,uBAAaG,OAAOC,MAAMlC,eAAemC,EAAGC,UACzFC,SAAWD,KAAKE,WAAWC,WAAWC,MAAMJ,KAAKK,eAC/CC,kBAAkBC,KAAK1D,QAAQD,OAAQqD,UAE7C3C,mBAAmBV,OAAQO,MAAM,aAKzCV,SAAS+D,iBAAiB,YAAYC,SAAQC,GAAKA,EAAErB,YAE9C,KAEVsB,OAAOrC,QAAU,2BAAiBA,gEASzCgC,kBAAoB,CAAC1D,OAAQqD,wCAE3B,oCACArD,OACA,YACAqD,SACA"}