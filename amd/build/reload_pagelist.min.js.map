{"version":3,"file":"reload_pagelist.min.js","sources":["../src/reload_pagelist.js"],"sourcesContent":["import {call as fetchMany} from 'core/ajax';\nimport Log from 'core/log';\nimport {exception as displayException} from 'core/notification';\nimport Templates from 'core/templates';\nimport SortableList from 'core/sortable_list';\nimport jQuery from 'jquery';\nimport {ajaxRequestInput} from 'mod_mootimeter/utils';\n\nexport const init = (pagerefreshintervall) => {\n    var obj = document.getElementById('mootimeterstate');\n\n    if (!obj) {\n        return;\n    }\n\n    if (pagerefreshintervall < 500) {\n        pagerefreshintervall = 500;\n    }\n\n    setInterval(() => {\n        getPagelist();\n    }, pagerefreshintervall);\n\n    /**\n     * Store the value.\n     */\n    function getPagelist() {\n        var pageid = 0;\n\n        if (document.getElementById('mootimeterstate').dataset.pageid) {\n            pageid = document.getElementById('mootimeterstate').dataset.pageid;\n            if (pageid == \"undefined\" || pageid.length == 0) {\n                pageid = 0;\n            }\n        }\n\n        const queryString = window.location.search;\n        const urlParams = new URLSearchParams(queryString);\n        const cmid = urlParams.get('id');\n        execReloadPagelist(pageid, cmid);\n    }\n};\n\n/**\n * Call to store input value\n * @param {int} pageid\n * @param {int} cmid\n * @param {string} dataset\n * @returns {array}\n */\nconst reloadPagelist = (\n    pageid,\n    cmid,\n    dataset\n) => fetchMany([{\n    methodname: 'mod_mootimeter_get_pages_list',\n    args: {\n        pageid,\n        cmid,\n        dataset\n    },\n}])[0];\n\n/**\n * Executes the call to store input value.\n * @param {int} pageid\n * @param {int} cmid\n * @param {bool} forcereload\n */\nexport const execReloadPagelist = async(pageid, cmid, forcereload = false) => {\n    var mtmstate = document.getElementById('mootimeterstate');\n    var dataset = mtmstate.dataset;\n\n    // Early exit if there were no changes.\n    if (\n        (\n            mtmstate.dataset.pagelistchangedat_prev\n            && mtmstate.dataset.pagelistchangedat == mtmstate.dataset.pagelistchangedat_prev\n        )\n        && !forcereload\n    ) {\n        return;\n    }\n\n    const queryString = window.location.search;\n    const urlParams = new URLSearchParams(queryString);\n\n    if (urlParams.get('r')) {\n        dataset.r = urlParams.get('r');\n    }\n\n    if (urlParams.get('o')) {\n        dataset.o = urlParams.get('o');\n    }\n\n    dataset.useUrlParams = 1;\n\n    const response = await reloadPagelist(pageid, cmid, JSON.stringify(dataset));\n\n    if (response.code != 200) {\n        Log.error(response.string);\n    }\n\n    if (response.code == 200) {\n\n        const pagelist = JSON.parse(response.pagelist);\n\n        // Replace the pages list.\n        Templates.renderForPromise('mod_mootimeter/elements/snippet_page_list', pagelist)\n            .then(({html, js}) => {\n                if (document.getElementById('mootimeter-addpage-button')) {\n                    document.getElementById('mootimeter-addpage-button').remove();\n                }\n                Templates.replaceNode(document.getElementById('mootimeter-pages-list'), html, js);\n\n                // Finally make pageslist sortable.\n                var listelements = document.getElementsByClassName('mootimeter_pages_li');\n                if (listelements[0]) {\n                    var uniqid = listelements[0].dataset.uniqid;\n                    new SortableList('#mootimeter-pages-list', {\n                        moveHandlerSelector: '.mootimeter_page_move_sortablehandle_' + uniqid,\n                    });\n                    jQuery('.mootimeter_pages_li_sortable_' + uniqid).on(SortableList.EVENTS.DROP, async function(_, info) {\n                        var newIndex = info.targetList.children().index(info.element);\n                        await storePagePosition(this.dataset.pageid, newIndex);\n                    });\n                }\n\n                // Remove all tooltips of pageslist that are still present.\n                document.querySelectorAll('.tooltip').forEach(e => e.remove());\n\n                return true;\n            })\n            .catch((error) => displayException(error));\n\n        // Set new pagelistchangedat_prev state.\n        mtmstate.setAttribute('data-pagelistchangedat_prev', mtmstate.dataset.pagelistchangedat);\n\n        // Remove all tooltips of pageslist that are still present.\n        document.querySelectorAll('.tooltip').forEach(e => e.remove());\n    }\n};\n\n/**\n * Store the new page position.\n * @param {int} pageid\n * @param {int} newIndex\n */\nconst storePagePosition = (pageid, newIndex) => {\n    ajaxRequestInput(\n        'mod_mootimeter_store_page_details',\n        pageid,\n        'sortorder',\n        newIndex,\n        ''\n    );\n};\n"],"names":["pagerefreshintervall","document","getElementById","setInterval","pageid","dataset","length","queryString","window","location","search","cmid","URLSearchParams","get","execReloadPagelist","getPagelist","reloadPagelist","methodname","args","async","forcereload","mtmstate","pagelistchangedat_prev","pagelistchangedat","urlParams","r","o","useUrlParams","response","JSON","stringify","code","error","string","pagelist","parse","renderForPromise","then","_ref","html","js","remove","replaceNode","listelements","getElementsByClassName","uniqid","SortableList","moveHandlerSelector","on","EVENTS","DROP","_","info","newIndex","targetList","children","index","element","storePagePosition","this","querySelectorAll","forEach","e","catch","setAttribute"],"mappings":"knBAQqBA,uBACPC,SAASC,eAAe,qBAM9BF,qBAAuB,MACvBA,qBAAuB,KAG3BG,aAAY,qBAQJC,OAAS,EAETH,SAASC,eAAe,mBAAmBG,QAAQD,SAErC,cADdA,OAASH,SAASC,eAAe,mBAAmBG,QAAQD,SACd,GAAjBA,OAAOE,SAChCF,OAAS,UAIXG,YAAcC,OAAOC,SAASC,OAE9BC,KADY,IAAIC,gBAAgBL,aACfM,IAAI,MAC3BC,mBAAmBV,OAAQO,MAnB3BI,KACDf,8BA6BDgB,eAAiB,CACnBZ,OACAO,KACAN,WACC,cAAU,CAAC,CACZY,WAAY,gCACZC,KAAM,CACFd,OAAAA,OACAO,KAAAA,KACAN,QAAAA,YAEJ,GAQSS,mBAAqBK,eAAMf,OAAQO,UAAMS,wEAC9CC,SAAWpB,SAASC,eAAe,mBACnCG,QAAUgB,SAAShB,WAKfgB,SAAShB,QAAQiB,wBACdD,SAAShB,QAAQkB,mBAAqBF,SAAShB,QAAQiB,yBAE1DF,yBAKFb,YAAcC,OAAOC,SAASC,OAC9Bc,UAAY,IAAIZ,gBAAgBL,aAElCiB,UAAUX,IAAI,OACdR,QAAQoB,EAAID,UAAUX,IAAI,MAG1BW,UAAUX,IAAI,OACdR,QAAQqB,EAAIF,UAAUX,IAAI,MAG9BR,QAAQsB,aAAe,QAEjBC,eAAiBZ,eAAeZ,OAAQO,KAAMkB,KAAKC,UAAUzB,aAE9C,KAAjBuB,SAASG,mBACLC,MAAMJ,SAASK,QAGF,KAAjBL,SAASG,KAAa,OAEhBG,SAAWL,KAAKM,MAAMP,SAASM,6BAG3BE,iBAAiB,4CAA6CF,UACnEG,MAAKC,WAACC,KAACA,KAADC,GAAOA,SACNvC,SAASC,eAAe,8BACxBD,SAASC,eAAe,6BAA6BuC,4BAE/CC,YAAYzC,SAASC,eAAe,yBAA0BqC,KAAMC,QAG1EG,aAAe1C,SAAS2C,uBAAuB,0BAC/CD,aAAa,GAAI,KACbE,OAASF,aAAa,GAAGtC,QAAQwC,WACjCC,uBAAa,yBAA0B,CACvCC,oBAAqB,wCAA0CF,6BAE5D,iCAAmCA,QAAQG,GAAGF,uBAAaG,OAAOC,MAAM/B,eAAegC,EAAGC,UACzFC,SAAWD,KAAKE,WAAWC,WAAWC,MAAMJ,KAAKK,eAC/CC,kBAAkBC,KAAKtD,QAAQD,OAAQiD,oBAKrDpD,SAAS2D,iBAAiB,YAAYC,SAAQC,GAAKA,EAAErB,YAE9C,KAEVsB,OAAO/B,QAAU,2BAAiBA,SAGvCX,SAAS2C,aAAa,8BAA+B3C,SAAShB,QAAQkB,mBAGtEtB,SAAS2D,iBAAiB,YAAYC,SAAQC,GAAKA,EAAErB,kEASvDiB,kBAAoB,CAACtD,OAAQiD,wCAE3B,oCACAjD,OACA,YACAiD,SACA"}