{"version":3,"file":"reload_pagelist.min.js","sources":["../src/reload_pagelist.js"],"sourcesContent":["import {call as fetchMany} from 'core/ajax';\nimport Log from 'core/log';\nimport {exception as displayException} from 'core/notification';\nimport Templates from 'core/templates';\n\nexport const init = () => {\n    var obj = document.getElementById('mootimeterstate');\n\n    if (!obj) {\n        return;\n    }\n\n    setInterval(() => {\n        getPagelist();\n    }, 5000);\n\n    /**\n     * Store the value.\n     */\n    function getPagelist() {\n        var pageid = document.getElementById('mootimeterstate').dataset.pageid;\n        const queryString = window.location.search;\n        const urlParams = new URLSearchParams(queryString);\n        const cmid = urlParams.get('id');\n        execReloadPagelist(pageid, cmid);\n    }\n};\n\n/**\n * Call to store input value\n * @param {int} pageid\n * @param {int} cmid\n * @returns {array}\n */\nconst reloadPagelist = (\n    pageid,\n    cmid\n) => fetchMany([{\n    methodname: 'mod_mootimeter_get_pages_list',\n    args: {\n        pageid,\n        cmid\n    },\n}])[0];\n\n/**\n * Executes the call to store input value.\n * @param {int} pageid\n * @param {int} cmid\n */\nconst execReloadPagelist = async(pageid, cmid) => {\n    const response = await reloadPagelist(pageid, cmid);\n\n    if (response.code != 200) {\n        Log.error(response.string);\n    }\n\n    if (response.code == 200) {\n\n        var mtmstate = document.getElementById('mootimeterstate');\n\n        const pagelist = JSON.parse(response.pagelist);\n\n        // If there are no changes in pagelist. We are finished.\n        if (mtmstate.dataset.pagelisttime == pagelist.pagelisttime) {\n            return;\n        }\n\n        // Set new pagelisttime state.\n        mtmstate.setAttribute('data-pagelisttime', pagelist.pagelisttime);\n\n        document.getElementById('mootimeter-pages-list').innerHTML = \"\";\n        for (var page of pagelist.pageslist) {\n            Templates.renderForPromise('mod_mootimeter/elements/snippet_page_list_element', page)\n                .then(({html, js}) => {\n                    Templates.appendNodeContents('#mootimeter-pages-list', html, js);\n                    return true;\n                })\n                .catch((error) => displayException(error));\n        }\n    }\n};"],"names":["document","getElementById","setInterval","pageid","dataset","queryString","window","location","search","cmid","URLSearchParams","get","execReloadPagelist","getPagelist","async","response","methodname","args","reloadPagelist","code","error","string","mtmstate","pagelist","JSON","parse","pagelisttime","page","setAttribute","innerHTML","pageslist","renderForPromise","then","_ref","html","js","appendNodeContents","catch"],"mappings":"qaAKoB,KACNA,SAASC,eAAe,oBAMlCC,aAAY,qBAQJC,OAASH,SAASC,eAAe,mBAAmBG,QAAQD,aAC1DE,YAAcC,OAAOC,SAASC,OAE9BC,KADY,IAAIC,gBAAgBL,aACfM,IAAI,MAC3BC,mBAAmBT,OAAQM,MAX3BI,KACD,YAoCDD,mBAAqBE,MAAMX,OAAQM,cAC/BM,cAjBa,EACnBZ,OACAM,QACC,cAAU,CAAC,CACZO,WAAY,gCACZC,KAAM,CACFd,OAAAA,OACAM,KAAAA,SAEJ,GAQuBS,CAAef,OAAQM,SAEzB,KAAjBM,SAASI,mBACLC,MAAML,SAASM,QAGF,KAAjBN,SAASI,KAAa,KAElBG,SAAWtB,SAASC,eAAe,yBAEjCsB,SAAWC,KAAKC,MAAMV,SAASQ,aAGjCD,SAASlB,QAAQsB,cAAgBH,SAASG,wBAQzC,IAAIC,QAHTL,SAASM,aAAa,oBAAqBL,SAASG,cAEpD1B,SAASC,eAAe,yBAAyB4B,UAAY,GAC5CN,SAASO,8BACZC,iBAAiB,oDAAqDJ,MAC3EK,MAAKC,WAACC,KAACA,KAADC,GAAOA,mCACAC,mBAAmB,yBAA0BF,KAAMC,KACtD,KAEVE,OAAOjB,QAAU,2BAAiBA"}