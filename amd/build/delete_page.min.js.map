{"version":3,"file":"delete_page.min.js","sources":["../src/delete_page.js"],"sourcesContent":["import {call as fetchMany} from 'core/ajax';\nimport Log from 'core/log';\nimport ModalDeleteCancel from 'core/modal_delete_cancel';\nimport ModalEvents from 'core/modal_events';\nimport {get_string as getString} from 'core/str';\nimport {execReloadPage as reloadPage} from 'mod_mootimeter/reload_page';\nimport {removeGetParam} from 'mod_mootimeter/utils';\n\nexport const init = async(id) => {\n    const pageid = document.getElementById('mootimeterstate').dataset.pageid;\n\n    const modal = await ModalDeleteCancel.create({\n        title: getString('delete', 'core'),\n        body: getString('areyousure'),\n    });\n\n    modal.getRoot().on(ModalEvents.delete, function() {\n        execDeletePage(pageid);\n    });\n\n    document.getElementById(id).addEventListener('click', () => {\n        modal.show();\n    });\n\n    /**\n     * Call to store input value\n     * @param {int} pageid\n     * @returns {mixed}\n     */\n    const deletePageCall = (\n        pageid,\n    ) => fetchMany([{\n        methodname: 'mod_mootimeter_delete_page',\n        args: {\n            pageid\n        },\n    }])[0];\n\n    /**\n     * Executes the call to store input value.\n     * @param {int} pageid\n     */\n    const execDeletePage = async(pageid) => {\n        var mtmstate = document.getElementById('mootimeterstate');\n        const response = await deletePageCall(pageid);\n        if (response.code != 200) {\n            Log.error(response.string);\n            return;\n        }\n        removeGetParam('pageid', window.location.href);\n        mtmstate.setAttribute('data-pageid', 0);\n        reloadPage(0, response.cmid);\n    };\n};\n"],"names":["async","pageid","document","getElementById","dataset","modal","ModalDeleteCancel","create","title","body","getRoot","on","ModalEvents","delete","execDeletePage","id","addEventListener","show","mtmstate","response","methodname","args","deletePageCall","code","window","location","href","setAttribute","cmid","error","string"],"mappings":"qlBAQoBA,MAAAA,WACVC,OAASC,SAASC,eAAe,mBAAmBC,QAAQH,OAE5DI,YAAcC,6BAAkBC,OAAO,CACzCC,OAAO,mBAAU,SAAU,QAC3BC,MAAM,mBAAU,gBAGpBJ,MAAMK,UAAUC,GAAGC,sBAAYC,QAAQ,WACnCC,eAAeb,WAGnBC,SAASC,eAAeY,IAAIC,iBAAiB,SAAS,KAClDX,MAAMY,gBAqBJH,eAAiBd,MAAAA,aACfkB,SAAWhB,SAASC,eAAe,yBACjCgB,cAdNlB,CAAAA,SACC,cAAU,CAAC,CACZmB,WAAY,6BACZC,KAAM,CACFpB,OAAAA,WAEJ,GAQuBqB,CAAerB,QACjB,KAAjBkB,SAASI,gCAIE,SAAUC,OAAOC,SAASC,MACzCR,SAASS,aAAa,cAAe,mCAC1B,EAAGR,SAASS,oBALfC,MAAMV,SAASW"}