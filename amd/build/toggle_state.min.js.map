{"version":3,"file":"toggle_state.min.js","sources":["../src/toggle_state.js"],"sourcesContent":["import { call as fetchMany } from 'core/ajax';\n\nexport const init = (uniqueID) => {\n    var obj = document.getElementById(uniqueID);\n\n    if (!document.getElementById(uniqueID)) {\n        return;\n    }\n\n    obj.addEventListener(\"click\", toggleState);\n\n    /**\n     * Store the value.\n     */\n    function toggleState() {\n        var pageid = this.dataset.pageid;\n        var uniqueID = this.id;\n\n        exectoggleState(pageid, uniqueID);\n    }\n};\n\n/**\n * Call to store input value\n * @param {int} pageid\n * @param {string} statename\n * @returns\n */\nconst storeInputValue = (\n    pageid,\n    statename\n) => fetchMany([{\n    methodname: 'mod_mootimeter_toggle_state',\n    args: {\n        pageid,\n        statename\n    },\n}])[0];\n\n/**\n * Executes the call to store input value.\n * @param {int} pageid\n * @param {string} uniqueID\n */\nconst exectoggleState = async (pageid, uniqueID) => {\n    var statename = document.getElementById(uniqueID).dataset.togglename;\n    const response = await storeInputValue(pageid, statename);\n\n    if (response.code != 200) {\n        window.console.log(response.string);\n    }\n\n    if (response.code == 200) {\n\n        var element = document.getElementById(uniqueID);\n        var dataset = element.dataset;\n        var iconid = dataset.iconid;\n\n        document.getElementById(iconid).classList.remove(dataset.iconenabled);\n        document.getElementById(iconid).classList.remove(dataset.icondisabled);\n\n        if (response.newstate == 1) {\n            document.getElementById(iconid).classList.add(dataset.iconenabled);\n            document.getElementById(uniqueID).setAttribute('data-original-title', dataset.tooltipdisabled);\n        }\n\n        if (response.newstate != 1) {\n            document.getElementById(iconid).classList.add(dataset.icondisabled);\n            document.getElementById(uniqueID).setAttribute('data-original-title', dataset.tooltipenabled);\n        }\n\n        // To force the webservice to pull all results.\n        let nodelastupdated = document.getElementById('mootimeterstate');\n        nodelastupdated.setAttribute('data-lastupdated', 0);\n\n    }\n};"],"names":["uniqueID","obj","document","getElementById","addEventListener","pageid","this","dataset","id","exectoggleState","async","statename","togglename","response","methodname","args","storeInputValue","code","window","console","log","string","iconid","classList","remove","iconenabled","icondisabled","newstate","add","setAttribute","tooltipdisabled","tooltipenabled"],"mappings":"kLAEqBA,eACbC,IAAMC,SAASC,eAAeH,UAE7BE,SAASC,eAAeH,WAI7BC,IAAIG,iBAAiB,wBAMbC,OAASC,KAAKC,QAAQF,OACtBL,SAAWM,KAAKE,GAEpBC,gBAAgBJ,OAAQL,oBA0B1BS,gBAAkBC,MAAOL,OAAQL,gBAC/BW,UAAYT,SAASC,eAAeH,UAAUO,QAAQK,iBACpDC,cAlBc,EACpBR,OACAM,aACC,cAAU,CAAC,CACZG,WAAY,8BACZC,KAAM,CACFV,cACAM,wBAEJ,GASuBK,CAAgBX,OAAQM,cAE1B,KAAjBE,SAASI,MACTC,OAAOC,QAAQC,IAAIP,SAASQ,QAGX,KAAjBR,SAASI,KAAa,KAGlBV,QADUL,SAASC,eAAeH,UAChBO,QAClBe,OAASf,QAAQe,OAErBpB,SAASC,eAAemB,QAAQC,UAAUC,OAAOjB,QAAQkB,aACzDvB,SAASC,eAAemB,QAAQC,UAAUC,OAAOjB,QAAQmB,cAEhC,GAArBb,SAASc,WACTzB,SAASC,eAAemB,QAAQC,UAAUK,IAAIrB,QAAQkB,aACtDvB,SAASC,eAAeH,UAAU6B,aAAa,sBAAuBtB,QAAQuB,kBAGzD,GAArBjB,SAASc,WACTzB,SAASC,eAAemB,QAAQC,UAAUK,IAAIrB,QAAQmB,cACtDxB,SAASC,eAAeH,UAAU6B,aAAa,sBAAuBtB,QAAQwB,iBAI5D7B,SAASC,eAAe,mBAC9B0B,aAAa,mBAAoB"}