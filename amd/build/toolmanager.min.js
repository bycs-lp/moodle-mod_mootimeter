define("mod_mootimeter/toolmanager",["exports","core/notification","mod_mootimeter/util","core/templates","core/str"],(function(_exports,_notification,Util,_templates,_str){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.init=_exports.ToolManager=void 0,_notification=_interopRequireDefault(_notification),Util=function(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!=typeof obj&&"function"!=typeof obj)return{default:obj};var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}newObj.default=obj,cache&&cache.set(obj,newObj);return newObj}(Util),_templates=_interopRequireDefault(_templates);var _systemImportTransformerGlobalIdentifier="undefined"!=typeof window?window:"undefined"!=typeof self?self:"undefined"!=typeof global?global:{};function _getRequireWildcardCache(nodeInterop){if("function"!=typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}
/**
   * A cool tool Manager.
   *
   * @module     mod_mootimeter/toolmanager
   * @copyright  2023 Justus Dieckmann WWU
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */class ToolManagerClass{constructor(){_defineProperty(this,"tools",{}),_defineProperty(this,"pages",{}),_defineProperty(this,"instanceid",void 0),_defineProperty(this,"isEditing",void 0),_defineProperty(this,"settings",void 0),_defineProperty(this,"elRoot",void 0),_defineProperty(this,"elPagesCol",void 0),_defineProperty(this,"elEditCol",void 0),_defineProperty(this,"elContentCol",void 0),_defineProperty(this,"strings",void 0)}async prefetch(){"function"==typeof _systemImportTransformerGlobalIdentifier.define&&_systemImportTransformerGlobalIdentifier.define.amd?new Promise((function(resolve,reject){_systemImportTransformerGlobalIdentifier.require(["mod_mootimeter/settings/select"],resolve,reject)})):"undefined"!=typeof module&&module.exports&&"undefined"!=typeof require||"undefined"!=typeof module&&module.component&&_systemImportTransformerGlobalIdentifier.require&&"component"===_systemImportTransformerGlobalIdentifier.require.loader?Promise.resolve(require("mod_mootimeter/settings/select")):Promise.resolve(_systemImportTransformerGlobalIdentifier["mod_mootimeter/settings/select"]),"function"==typeof _systemImportTransformerGlobalIdentifier.define&&_systemImportTransformerGlobalIdentifier.define.amd?new Promise((function(resolve,reject){_systemImportTransformerGlobalIdentifier.require(["mod_mootimeter/settings/setting"],resolve,reject)})):"undefined"!=typeof module&&module.exports&&"undefined"!=typeof require||"undefined"!=typeof module&&module.component&&_systemImportTransformerGlobalIdentifier.require&&"component"===_systemImportTransformerGlobalIdentifier.require.loader?Promise.resolve(require("mod_mootimeter/settings/setting")):Promise.resolve(_systemImportTransformerGlobalIdentifier["mod_mootimeter/settings/setting"]),"function"==typeof _systemImportTransformerGlobalIdentifier.define&&_systemImportTransformerGlobalIdentifier.define.amd?new Promise((function(resolve,reject){_systemImportTransformerGlobalIdentifier.require(["mod_mootimeter/settings/textarea"],resolve,reject)})):"undefined"!=typeof module&&module.exports&&"undefined"!=typeof require||"undefined"!=typeof module&&module.component&&_systemImportTransformerGlobalIdentifier.require&&"component"===_systemImportTransformerGlobalIdentifier.require.loader?Promise.resolve(require("mod_mootimeter/settings/textarea")):Promise.resolve(_systemImportTransformerGlobalIdentifier["mod_mootimeter/settings/textarea"]),_templates.default.prefetchTemplates(["mod_mootimeter/settings/select","mod_mootimeter/settings/textarea","mod_mootimeter/settings_column"]),(0,_str.get_strings)([{key:"pagetype",component:"mod_mootimeter"},{key:"title",component:"mod_mootimeter"},{key:"question",component:"mod_mootimeter"},{key:"pagesettings",component:"mod_mootimeter"},{key:"toolsettings",component:"mod_mootimeter"}])}async init(tools,pages,instanceid,isEditing){this.prefetch();for(let tool of tools)this.tools[tool.name]={constructor:await("function"==typeof _systemImportTransformerGlobalIdentifier.define&&_systemImportTransformerGlobalIdentifier.define.amd?new Promise((function(resolve,reject){_systemImportTransformerGlobalIdentifier.require(["mootimetertool_".concat(tool.name,"/tool")],resolve,reject)})):"undefined"!=typeof module&&module.exports&&"undefined"!=typeof require||"undefined"!=typeof module&&module.component&&_systemImportTransformerGlobalIdentifier.require&&"component"===_systemImportTransformerGlobalIdentifier.require.loader?Promise.resolve(require("mootimetertool_".concat(tool.name,"/tool"))):Promise.resolve(_systemImportTransformerGlobalIdentifier["mootimetertool_".concat(tool.name,"/tool")])),settings:tool.settings,label:tool.label};this.pages=pages,this.instanceid=instanceid,this.isEditing=isEditing,this.elRoot=document.querySelector(".mootimetercontainer"),this.elPagesCol=this.elRoot.querySelector(".mootimetercolpages"),this.elEditCol=this.elRoot.querySelector(".mootimetercoledit"),this.elContentCol=this.elRoot.querySelector(".mootimetercolcontent"),this.elPagesCol.onclick=e=>{const element=e.target.closest(".mootimeter_pages_li");element&&element.dataset.pageid&&this.route(element.dataset.pageid)};const params=new URLSearchParams(location.search);params.has("pageid")&&await this.route(params.get("pageid"),params.has("results"))}async route(pageID){var _this$elPagesCol$quer,_this$elPagesCol$quer2;let results=arguments.length>1&&void 0!==arguments[1]&&arguments[1];const newUrl=new URL(location);newUrl.search="",newUrl.searchParams.set("pageid",pageID),results&&newUrl.searchParams.set("results","1");const page=this.pages[pageID];page||(location=newUrl),page.toolInstance||(page.toolInstance=new this.tools[page.tool].constructor(page,this.isEditing)),history.pushState({},null,newUrl),this.elPagesCol.querySelectorAll(".mootimeter_pages_li.active").forEach((x=>x.classList.remove("active"))),null===(_this$elPagesCol$quer=this.elPagesCol.querySelector('.mootimeter_pages_li[data-pageid="'.concat(page.id,'"]')))||void 0===_this$elPagesCol$quer||null===(_this$elPagesCol$quer2=_this$elPagesCol$quer.classList)||void 0===_this$elPagesCol$quer2||_this$elPagesCol$quer2.add("active"),this.elContentCol.replaceChildren("plz wait");const promises=[];results?promises.push(page.toolInstance.renderResult()):promises.push(page.toolInstance.render()),this.isEditing&&(this.elEditCol.replaceChildren("plz wait"),promises.push(this.renderSettings(page)));const[documentFragment,settingsFragment]=await Promise.all(promises);this.elContentCol.replaceChildren(...documentFragment.children),settingsFragment&&this.elEditCol.replaceChildren(...settingsFragment.children)}async renderSettings(page){const settings=this.tools[page.tool].settings,tools={};for(let key in this.tools)tools[key]=this.tools[key].label;const firstsettings=[{module:"mod_mootimeter/settings/select",config:{elementname:"tool",id:"id_tool",label:await(0,_str.get_string)("pagetype","mod_mootimeter"),value:page.tool,options:tools}},{module:"mod_mootimeter/settings/textarea",config:{elementname:"title",id:"id_title",label:await(0,_str.get_string)("title","mod_mootimeter"),value:page.title,paramtype:"text"}},{module:"mod_mootimeter/settings/textarea",config:{elementname:"question",id:"id_question",label:await(0,_str.get_string)("question","mod_mootimeter"),value:page.question,paramtype:"text"}}],content=await Util.renderTemplate("mod_mootimeter/settings_column",{accordionwrapperid:"accordionwrapper",instancename:page.title,pageid:page.id,section:[{sectionid:"generalsettings",title:await(0,_str.get_string)("pagesettings","mod_mootimeter")},{sectionid:"toolsettings",title:await(0,_str.get_string)("toolsettings","mod_mootimeter")}]});return window.console.log({accordionwrapperid:"accordionwrapper",instancename:page.title,pageid:page.id,section:[{sectionid:"generalsettings",title:await(0,_str.get_string)("pagesettings","mod_mootimeter")},{sectionid:"toolsettings",title:await(0,_str.get_string)("toolsettings","mod_mootimeter")}]}),content.querySelector("#generalsettings .card-body").append(...(await this.renderSettingsAccordion(firstsettings,page)).children),content.querySelector("#toolsettings .card-body").append(...(await this.renderSettingsAccordion(settings,page.config)).children),content}async renderSettingsAccordion(settings,data){const content=document.createElement("div"),promises=[];for(const setting of settings){var _data$name;let value=null!==(_data$name=data[setting.config.name])&&void 0!==_data$name?_data$name:setting.config.initialvalue;promises.push(("function"==typeof _systemImportTransformerGlobalIdentifier.define&&_systemImportTransformerGlobalIdentifier.define.amd?new Promise((function(resolve,reject){_systemImportTransformerGlobalIdentifier.require([setting.module],resolve,reject)})):"undefined"!=typeof module&&module.exports&&"undefined"!=typeof require||"undefined"!=typeof module&&module.component&&_systemImportTransformerGlobalIdentifier.require&&"component"===_systemImportTransformerGlobalIdentifier.require.loader?Promise.resolve(require(setting.module)):Promise.resolve(_systemImportTransformerGlobalIdentifier[setting.module])).then((async constructor=>{const controller=new constructor(setting.config,value),node=await controller.renderSetting();return{controller:controller,node:node}})).catch(_notification.default.exception))}this.settings=[];const resolved=await Promise.all(promises);for(let i=0;i<promises.length;i++){const{controller:controller,node:node}=resolved[i];content.append(...node.children),this.settings.push({controller:controller,node:node})}return content}}let ToolManager;_exports.ToolManager=ToolManager;_exports.init=async(tools,pages,instanceid,isEditing)=>{_exports.ToolManager=ToolManager=new ToolManagerClass,await ToolManager.init(tools,pages,instanceid,isEditing)}}));

//# sourceMappingURL=toolmanager.min.js.map