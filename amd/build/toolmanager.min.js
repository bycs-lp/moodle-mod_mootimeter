define("mod_mootimeter/toolmanager",["exports"],(function(_exports){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.init=_exports.ToolManager=void 0;var _systemImportTransformerGlobalIdentifier="undefined"!=typeof window?window:"undefined"!=typeof self?self:"undefined"!=typeof global?global:{};function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}
/**
   * A cool tool Manager.
   *
   * @module     mod_mootimeter/toolmanager
   * @copyright  2023 Justus Dieckmann WWU
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */class ToolManagerClass{constructor(){_defineProperty(this,"tools",{}),_defineProperty(this,"pages",{}),_defineProperty(this,"instanceid",void 0),_defineProperty(this,"isEditing",void 0),_defineProperty(this,"elRoot",void 0),_defineProperty(this,"elPagesCol",void 0),_defineProperty(this,"elEditCol",void 0),_defineProperty(this,"elContentCol",void 0)}async init(tools,pages,instanceid,isEditing){for(let tool of tools)this.tools[tool]=await("function"==typeof _systemImportTransformerGlobalIdentifier.define&&_systemImportTransformerGlobalIdentifier.define.amd?new Promise((function(resolve,reject){_systemImportTransformerGlobalIdentifier.require([`mootimetertool_${tool}/tool`],resolve,reject)})):"undefined"!=typeof module&&module.exports&&"undefined"!=typeof require||"undefined"!=typeof module&&module.component&&_systemImportTransformerGlobalIdentifier.require&&"component"===_systemImportTransformerGlobalIdentifier.require.loader?Promise.resolve(require(`mootimetertool_${tool}/tool`)):Promise.resolve(_systemImportTransformerGlobalIdentifier[`mootimetertool_${tool}/tool`]));this.pages=pages,this.instanceid=instanceid,this.isEditing=isEditing,this.elRoot=document.querySelector(".mootimetercontainer"),this.elPagesCol=this.elRoot.querySelector(".mootimetercolpages"),this.elEditCol=this.elRoot.querySelector(".mootimetercoledit"),this.elContentCol=this.elRoot.querySelector(".mootimetercolcontent"),this.elPagesCol.onclick=e=>{const element=e.target.closest(".mootimeter_pages_li");element&&element.dataset.pageid&&this.route(element.dataset.pageid)};const params=new URLSearchParams(location.search);params.has("pageid")&&await this.route(params.get("pageid"),params.has("results"))}async route(pageID){var _this$elPagesCol$quer,_this$elPagesCol$quer2;let results=arguments.length>1&&void 0!==arguments[1]&&arguments[1];const newUrl=new URL(location);newUrl.search="",newUrl.searchParams.set("pageid",pageID),results&&newUrl.searchParams.set("results","1");const page=this.pages[pageID];page||(location=newUrl),page.toolInstance||(page.toolInstance=new this.tools[page.tool](page,this.isEditing)),history.pushState({},null,newUrl),this.elPagesCol.querySelectorAll(".mootimeter_pages_li.active").forEach((x=>x.classList.remove("active"))),null===(_this$elPagesCol$quer=this.elPagesCol.querySelector(`.mootimeter_pages_li[data-pageid="${page.id}"]`))||void 0===_this$elPagesCol$quer||null===(_this$elPagesCol$quer2=_this$elPagesCol$quer.classList)||void 0===_this$elPagesCol$quer2||_this$elPagesCol$quer2.add("active"),this.elContentCol.replaceChildren("plz wait");const documentFragment=results?await page.toolInstance.renderResult():await page.toolInstance.render();this.elContentCol.replaceChildren(...documentFragment.children)}}let ToolManager;_exports.ToolManager=ToolManager;_exports.init=async(tools,pages,instanceid,isEditing)=>{_exports.ToolManager=ToolManager=new ToolManagerClass,await ToolManager.init(tools,pages,instanceid,isEditing)}}));

//# sourceMappingURL=toolmanager.min.js.map