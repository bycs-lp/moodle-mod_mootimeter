{"version":3,"file":"reload_page.min.js","sources":["../src/reload_page.js"],"sourcesContent":["import {call as fetchMany} from 'core/ajax';\nimport Log from 'core/log';\nimport {exception as displayException} from 'core/notification';\nimport Templates from 'core/templates';\nimport {execReloadPagelist as reloadPagelist} from 'mod_mootimeter/reload_pagelist';\nimport {getGetParams} from 'mod_mootimeter/utils';\nimport {setGetParam} from 'mod_mootimeter/utils';\nimport {getMootimeterstate} from 'mod_mootimeter/get_mootimeterstate';\n\nexport const init = (uniqueID) => {\n\n    const obj = document.getElementById(uniqueID);\n    if (!obj) {\n        return;\n    }\n    obj.addEventListener(\"click\", changePage);\n\n    /**\n     * Store the value.\n     */\n    function changePage() {\n        var pageid = 0;\n        var dataset = \"\";\n        if (this.dataset) {\n            pageid = this.dataset.pageid;\n            dataset = this.dataset;\n        }\n\n        if (pageid === null || pageid === undefined || pageid == \"undefined\" || pageid.length == 0) {\n            pageid = 0;\n        }\n\n        const queryString = window.location.search;\n        const urlParams = new URLSearchParams(queryString);\n        const cmid = urlParams.get('id');\n        execReloadPage(pageid, cmid, dataset);\n    }\n};\n\n/**\n * Call to store input value\n * @param {int} pageid\n * @param {int} cmid\n * @param {string} dataset\n * @returns {array}\n */\nconst reloadPage = (\n    pageid,\n    cmid,\n    dataset\n) => fetchMany([{\n    methodname: 'mod_mootimeter_get_pagecontentparams',\n    args: {\n        pageid,\n        cmid,\n        dataset\n    },\n}])[0];\n\n/**\n * Executes the call to store input value.\n * @param {int} pageid\n * @param {int} cmid\n * @param {array} dataset\n */\nexport const execReloadPage = async(pageid, cmid, dataset) => {\n\n    // Check if the pagereload is locked.\n    var mtmstate = document.getElementById('mootimeterstate');\n    if (mtmstate.dataset.lockpagereload) {\n        return;\n    }\n\n    if (!dataset) {\n        dataset = getGetParams();\n    } else {\n        Object.assign(dataset, getGetParams());\n    }\n\n    dataset = JSON.stringify(dataset);\n\n    // Get the most recent timestamps.\n    await getMootimeterstate();\n\n    mtmstate = document.getElementById('mootimeterstate');\n\n    const response = await reloadPage(pageid, cmid, dataset);\n    if (response.code != 200) {\n        Log.error(response.string);\n    }\n\n    if (response.code == 200) {\n\n        const pageparmas = JSON.parse(response.pageparams);\n\n        // Replace the pagecontent.\n        if (\n            !mtmstate.dataset.contentchangedat_prev\n            || mtmstate.dataset.contentchangedat_prev != mtmstate.contentchangedat\n            || !mtmstate.dataset.teacherpermissiontoview_prev\n            || mtmstate.dataset.teacherpermissiontoview_prev != mtmstate.dataset.teacherpermissiontoviewteacherpermissiontoview\n        ) {\n            reloadPageContent(pageparmas.pagecontent);\n\n            // Set active page marked in pageslist.\n            reloadPagelist(pageid, cmid, true);\n        }\n\n        // Replace the pagecontent menu.\n        if (\n            !mtmstate.dataset.pagecontentmenuchangedat_prev\n            || mtmstate.dataset.pagecontentmenuchangedat_prev != mtmstate.settingschangedat\n        ) {\n            reloadContentMenu(pageparmas.contentmenu);\n        }\n\n        if (\n            pageparmas.colsettings\n            && (\n                !mtmstate.dataset.settingschangedat_prev\n                || mtmstate.dataset.settingschangedat_prev != mtmstate.settingschangedat\n            )\n        ) {\n            reloadSettingsCol(pageparmas.colsettings);\n        }\n\n        if (pageparmas.pageid) {\n            // Set new pageid.\n            mtmstate.setAttribute('data-pageid', pageparmas.pageid);\n\n            // Set URL parameter - pageid.\n            setGetParam('pageid', pageparmas.pageid);\n        }\n    }\n};\n\nexport const reloadSettingsCol = async(pageparmas) => {\n\n    var mtmstate = document.getElementById('mootimeterstate');\n\n    // Replace the settings col if necessary.\n    Templates.renderForPromise(pageparmas.template, pageparmas)\n        .then(({html, js}) => {\n            Templates.replaceNodeContents('#mootimeter-col-settings', html, js);\n            mtmstate.setAttribute('data-settingschangedat_prev', mtmstate.dataset.settingschangedat);\n            return true;\n        })\n        .catch((error) => displayException(error));\n\n};\n\nexport const reloadContentMenu = async(pageparmas) => {\n\n    var mtmstate = document.getElementById('mootimeterstate');\n\n    // Replace the settings col if necessary.\n    Templates.renderForPromise(pageparmas.template, pageparmas)\n        .then(({html, js}) => {\n            Templates.replaceNode('#mootimeter-pagecontentmenu', html, js);\n            mtmstate.setAttribute('data-pagecontentmenuchangedat_prev', mtmstate.dataset.pagecontentmenuchangedat);\n            return true;\n        })\n        .catch((error) => displayException(error));\n\n    // Set subpage URL parameters.\n    if (pageparmas.sp) {\n        for (const [key, value] of Object.entries(pageparmas.sp)) {\n            setGetParam(key, value);\n        }\n    }\n};\n\nexport const reloadPageContent = async(pageparmas) => {\n\n    var mtmstate = document.getElementById('mootimeterstate');\n\n    Templates.renderForPromise(pageparmas.template, pageparmas)\n        .then(({html, js}) => {\n            Templates.replaceNodeContents('#mootimeter-pagecontent', html, js);\n            mtmstate.setAttribute('data-contentchangedat_prev', mtmstate.dataset.contentchangedat);\n            mtmstate.setAttribute('data-teacherpermissiontoview_prev', mtmstate.dataset.teacherpermissiontoview);\n            return true;\n        })\n        .catch((error) => displayException(error));\n};\n"],"names":["uniqueID","obj","document","getElementById","addEventListener","pageid","dataset","this","length","queryString","window","location","search","cmid","URLSearchParams","get","execReloadPage","async","mtmstate","lockpagereload","Object","assign","JSON","stringify","response","methodname","args","reloadPage","code","error","string","pageparmas","parse","pageparams","contentchangedat_prev","contentchangedat","teacherpermissiontoview_prev","teacherpermissiontoviewteacherpermissiontoview","reloadPageContent","pagecontent","pagecontentmenuchangedat_prev","settingschangedat","reloadContentMenu","contentmenu","colsettings","settingschangedat_prev","reloadSettingsCol","setAttribute","renderForPromise","template","then","_ref","html","js","replaceNodeContents","catch","_ref2","replaceNode","pagecontentmenuchangedat","sp","key","value","entries","_ref3","teacherpermissiontoview"],"mappings":"opBASqBA,iBAEXC,IAAMC,SAASC,eAAeH,UAC/BC,KAGLA,IAAIG,iBAAiB,wBAMbC,OAAS,EACTC,QAAU,GACVC,KAAKD,UACLD,OAASE,KAAKD,QAAQD,OACtBC,QAAUC,KAAKD,SAGfD,MAAAA,QAAqD,aAAVA,QAA0C,GAAjBA,OAAOG,SAC3EH,OAAS,SAGPI,YAAcC,OAAOC,SAASC,OAE9BC,KADY,IAAIC,gBAAgBL,aACfM,IAAI,MAC3BC,eAAeX,OAAQQ,KAAMP,mBA8BxBU,eAAiBC,MAAMZ,OAAQQ,KAAMP,eAG1CY,SAAWhB,SAASC,eAAe,sBACnCe,SAASZ,QAAQa,sBAIhBb,QAGDc,OAAOC,OAAOf,SAAS,0BAFvBA,SAAU,yBAKdA,QAAUgB,KAAKC,UAAUjB,eAGnB,6CAENY,SAAWhB,SAASC,eAAe,yBAE7BqB,cAxCS,EACfnB,OACAQ,KACAP,WACC,cAAU,CAAC,CACZmB,WAAY,uCACZC,KAAM,CACFrB,OAAAA,OACAQ,KAAAA,KACAP,QAAAA,YAEJ,GA6BuBqB,CAAWtB,OAAQQ,KAAMP,YAC3B,KAAjBkB,SAASI,mBACLC,MAAML,SAASM,QAGF,KAAjBN,SAASI,KAAa,OAEhBG,WAAaT,KAAKU,MAAMR,SAASS,YAIlCf,SAASZ,QAAQ4B,uBACfhB,SAASZ,QAAQ4B,uBAAyBhB,SAASiB,kBAClDjB,SAASZ,QAAQ8B,8BAClBlB,SAASZ,QAAQ8B,8BAAgClB,SAASZ,QAAQ+B,iDAErEC,kBAAkBP,WAAWQ,qDAGdlC,OAAQQ,MAAM,IAK5BK,SAASZ,QAAQkC,+BACftB,SAASZ,QAAQkC,+BAAiCtB,SAASuB,mBAE9DC,kBAAkBX,WAAWY,cAI7BZ,WAAWa,aAEN1B,SAASZ,QAAQuC,wBACf3B,SAASZ,QAAQuC,wBAA0B3B,SAASuB,mBAG3DK,kBAAkBf,WAAWa,aAG7Bb,WAAW1B,SAEXa,SAAS6B,aAAa,cAAehB,WAAW1B,+BAGpC,SAAU0B,WAAW1B,wDAKhCyC,kBAAoB7B,MAAAA,iBAEzBC,SAAWhB,SAASC,eAAe,sCAG7B6C,iBAAiBjB,WAAWkB,SAAUlB,YAC3CmB,MAAKC,WAACC,KAACA,KAADC,GAAOA,mCACAC,oBAAoB,2BAA4BF,KAAMC,IAChEnC,SAAS6B,aAAa,8BAA+B7B,SAASZ,QAAQmC,oBAC/D,KAEVc,OAAO1B,QAAU,2BAAiBA,6DAI9Ba,kBAAoBzB,MAAAA,iBAEzBC,SAAWhB,SAASC,eAAe,yCAG7B6C,iBAAiBjB,WAAWkB,SAAUlB,YAC3CmB,MAAKM,YAACJ,KAACA,KAADC,GAAOA,oCACAI,YAAY,8BAA+BL,KAAMC,IAC3DnC,SAAS6B,aAAa,qCAAsC7B,SAASZ,QAAQoD,2BACtE,KAEVH,OAAO1B,QAAU,2BAAiBA,SAGnCE,WAAW4B,OACN,MAAOC,IAAKC,SAAUzC,OAAO0C,QAAQ/B,WAAW4B,2BACrCC,IAAKC,2DAKhBvB,kBAAoBrB,MAAAA,iBAEzBC,SAAWhB,SAASC,eAAe,sCAE7B6C,iBAAiBjB,WAAWkB,SAAUlB,YAC3CmB,MAAKa,YAACX,KAACA,KAADC,GAAOA,oCACAC,oBAAoB,0BAA2BF,KAAMC,IAC/DnC,SAAS6B,aAAa,6BAA8B7B,SAASZ,QAAQ6B,kBACrEjB,SAAS6B,aAAa,oCAAqC7B,SAASZ,QAAQ0D,0BACrE,KAEVT,OAAO1B,QAAU,2BAAiBA"}