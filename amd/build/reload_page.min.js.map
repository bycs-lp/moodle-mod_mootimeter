{"version":3,"file":"reload_page.min.js","sources":["../src/reload_page.js"],"sourcesContent":["import {call as fetchMany} from 'core/ajax';\nimport Log from 'core/log';\nimport {exception as displayException} from 'core/notification';\nimport Templates from 'core/templates';\nimport {execReloadPagelist as reloadPagelist} from 'mod_mootimeter/reload_pagelist';\n\nexport const init = (uniqueID) => {\n\n    const obj = document.getElementById(uniqueID);\n    if (!obj) {\n        return;\n    }\n    obj.addEventListener(\"click\", changePage);\n\n    /**\n     * Store the value.\n     */\n    function changePage() {\n        var pageid = this.dataset.pageid;\n        const queryString = window.location.search;\n        const urlParams = new URLSearchParams(queryString);\n        const cmid = urlParams.get('id');\n        execReloadPage(pageid, cmid);\n    }\n};\n\n/**\n * Call to store input value\n * @param {int} pageid\n * @param {int} cmid\n * @returns {array}\n */\nconst reloadPage = (\n    pageid,\n    cmid\n) => fetchMany([{\n    methodname: 'mod_mootimeter_get_pagecontentparams',\n    args: {\n        pageid,\n        cmid\n    },\n}])[0];\n\n/**\n * Executes the call to store input value.\n * @param {int} pageid\n * @param {int} cmid\n */\nconst execReloadPage = async(pageid, cmid) => {\n    const response = await reloadPage(pageid, cmid);\n\n    if (response.code != 200) {\n        Log.error(response.string);\n    }\n\n    if (response.code == 200) {\n\n        var mtmstate = document.getElementById('mootimeterstate');\n\n        const pageparmas = JSON.parse(response.pageparams);\n\n        // Set new pageid.\n        mtmstate.setAttribute('data-pageid', pageparmas.pageid);\n\n        // Replace the pagecontent.\n        Templates.renderForPromise(pageparmas.pagecontent.template, pageparmas.pagecontent)\n            .then(({html, js}) => {\n                Templates.replaceNodeContents('#mootimeter-pagecontent', html, js);\n                return true;\n            })\n            .catch((error) => displayException(error));\n\n        // Replace the pagecontent menu.\n        Templates.renderForPromise(pageparmas.contentmenu.template, pageparmas.contentmenu)\n            .then(({html, js}) => {\n                Templates.replaceNode('#mootimeter-pagecontentmenu', html, js);\n                return true;\n            })\n            .catch((error) => displayException(error));\n\n        // Replace the settings col if necessary.\n        Templates.renderForPromise(pageparmas.colsettings.template, pageparmas.colsettings)\n            .then(({html, js}) => {\n                Templates.replaceNodeContents('#mootimeter-col-settings', html, js);\n                return true;\n            })\n            .catch((error) => displayException(error));\n\n        // Set URL parameter.\n        setGetParam('pageid', pageparmas.pageid);\n\n        // Set active page marked in pageslist.\n        reloadPagelist(pageid, cmid, true);\n\n        // Remove all tooltips of pageslist that are still present.\n        document.querySelectorAll('.tooltip').forEach(e => e.remove());\n    }\n};\n\n/**\n * Set the Query Parameter.\n * @param {string} key\n * @param {string} value\n */\nfunction setGetParam(key, value) {\n    if (history.pushState) {\n        var params = new URLSearchParams(window.location.search);\n        params.set(key, value);\n        var newUrl = window.location.origin\n            + window.location.pathname\n            + '?' + params.toString();\n        window.history.pushState({path: newUrl}, '', newUrl);\n    }\n}"],"names":["uniqueID","obj","document","getElementById","addEventListener","pageid","this","dataset","queryString","window","location","search","cmid","URLSearchParams","get","execReloadPage","async","response","methodname","args","reloadPage","code","error","string","mtmstate","pageparmas","JSON","parse","pageparams","setAttribute","renderForPromise","pagecontent","template","then","_ref","html","js","replaceNodeContents","catch","contentmenu","_ref2","replaceNode","colsettings","_ref3","key","value","history","pushState","params","set","newUrl","origin","pathname","toString","path","setGetParam","querySelectorAll","forEach","e","remove"],"mappings":"mdAMqBA,iBAEXC,IAAMC,SAASC,eAAeH,UAC/BC,KAGLA,IAAIG,iBAAiB,wBAMbC,OAASC,KAAKC,QAAQF,aACpBG,YAAcC,OAAOC,SAASC,OAE9BC,KADY,IAAIC,gBAAgBL,aACfM,IAAI,MAC3BC,eAAeV,OAAQO,gBA0BzBG,eAAiBC,MAAMX,OAAQO,cAC3BK,cAjBS,EACfZ,OACAO,QACC,cAAU,CAAC,CACZM,WAAY,uCACZC,KAAM,CACFd,OAAAA,OACAO,KAAAA,SAEJ,GAQuBQ,CAAWf,OAAQO,SAErB,KAAjBK,SAASI,mBACLC,MAAML,SAASM,QAGF,KAAjBN,SAASI,KAAa,KAElBG,SAAWtB,SAASC,eAAe,yBAEjCsB,WAAaC,KAAKC,MAAMV,SAASW,YAGvCJ,SAASK,aAAa,cAAeJ,WAAWpB,2BAGtCyB,iBAAiBL,WAAWM,YAAYC,SAAUP,WAAWM,aAClEE,MAAKC,WAACC,KAACA,KAADC,GAAOA,mCACAC,oBAAoB,0BAA2BF,KAAMC,KACxD,KAEVE,OAAOhB,QAAU,2BAAiBA,4BAG7BQ,iBAAiBL,WAAWc,YAAYP,SAAUP,WAAWc,aAClEN,MAAKO,YAACL,KAACA,KAADC,GAAOA,oCACAK,YAAY,8BAA+BN,KAAMC,KACpD,KAEVE,OAAOhB,QAAU,2BAAiBA,4BAG7BQ,iBAAiBL,WAAWiB,YAAYV,SAAUP,WAAWiB,aAClET,MAAKU,YAACR,KAACA,KAADC,GAAOA,oCACAC,oBAAoB,2BAA4BF,KAAMC,KACzD,KAEVE,OAAOhB,QAAU,2BAAiBA,kBAkB1BsB,IAAKC,UAClBC,QAAQC,UAAW,KACfC,OAAS,IAAInC,gBAAgBJ,OAAOC,SAASC,QACjDqC,OAAOC,IAAIL,IAAKC,WACZK,OAASzC,OAAOC,SAASyC,OACvB1C,OAAOC,SAAS0C,SAChB,IAAMJ,OAAOK,WACnB5C,OAAOqC,QAAQC,UAAU,CAACO,KAAMJ,QAAS,GAAIA,SAtB7CK,CAAY,SAAU9B,WAAWpB,gDAGlBA,OAAQO,MAAM,GAG7BV,SAASsD,iBAAiB,YAAYC,SAAQC,GAAKA,EAAEC"}