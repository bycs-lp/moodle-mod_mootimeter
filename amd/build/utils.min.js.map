{"version":3,"file":"utils.min.js","sources":["../src/utils.js"],"sourcesContent":["import {exception as displayException} from 'core/notification';\nimport Templates from 'core/templates';\n\n/**\n * Generate an info box.\n * @param {string} apendtoelementid\n * @param {string} infoboxid\n * @param {string} notificationType\n * @param {string} notificationString\n */\nexport const renderInfoBox = async(apendtoelementid, infoboxid, notificationType, notificationString) => {\n    const context = {\n        \"notification_id\": infoboxid,\n        \"notification_type\": notificationType,\n        \"notification_icon\": \"fa-exclamation\",\n        \"notification_text\": notificationString\n    };\n\n    Templates.renderForPromise('mod_mootimeter/elements/snippet_notification', context)\n        .then(({html, js}) => {\n            Templates.appendNodeContents('#' + apendtoelementid, html, js);\n            return true;\n        })\n        .catch((error) => displayException(error));\n};\n\n/**\n * Remove the info box.\n * @param {string} infoboxid\n */\nexport const removeInfoBox = async(infoboxid) => {\n    var infobox = document.getElementById(infoboxid);\n    if (infobox) {\n        infobox.remove();\n    }\n};\n\n/**\n * Set the Query Parameter.\n * @param {string} key\n * @param {string} value\n */\nexport const setGetParam = (key, value) => {\n    if (history.pushState) {\n        var params = new URLSearchParams(window.location.search);\n        params.set(key, value);\n        var newUrl = window.location.origin\n            + window.location.pathname\n            + '?' + params.toString();\n        window.history.pushState({path: newUrl}, '', newUrl);\n    }\n};\n\n/**\n * Get an array of all url search params.\n * @param {string} url\n * @returns {array}\n */\nexport const getGetParams = (url = window.location) => {\n    // Create a params object\n    let params = {};\n    new URL(url).searchParams.forEach(function(val, key) {\n        params[key] = val;\n    });\n    return params;\n};"],"names":["async","apendtoelementid","infoboxid","notificationType","notificationString","context","renderForPromise","then","_ref","html","js","appendNodeContents","catch","error","infobox","document","getElementById","remove","key","value","history","pushState","params","URLSearchParams","window","location","search","set","newUrl","origin","pathname","toString","path","url","URL","searchParams","forEach","val"],"mappings":"iXAU6BA,MAAMC,iBAAkBC,UAAWC,iBAAkBC,4BACxEC,QAAU,iBACOH,4BACEC,mCACA,mCACAC,uCAGfE,iBAAiB,+CAAgDD,SACtEE,MAAKC,WAACC,KAACA,KAADC,GAAOA,mCACAC,mBAAmB,IAAMV,iBAAkBQ,KAAMC,KACpD,KAEVE,OAAOC,QAAU,2BAAiBA,iCAOdb,MAAAA,gBACrBc,QAAUC,SAASC,eAAed,WAClCY,SACAA,QAAQG,+BASW,CAACC,IAAKC,YACzBC,QAAQC,UAAW,KACfC,OAAS,IAAIC,gBAAgBC,OAAOC,SAASC,QACjDJ,OAAOK,IAAIT,IAAKC,WACZS,OAASJ,OAAOC,SAASI,OACvBL,OAAOC,SAASK,SAChB,IAAMR,OAAOS,WACnBP,OAAOJ,QAAQC,UAAU,CAACW,KAAMJ,QAAS,GAAIA,gCASzB,eAACK,2DAAMT,OAAOC,SAElCH,OAAS,cACTY,IAAID,KAAKE,aAAaC,SAAQ,SAASC,IAAKnB,KAC5CI,OAAOJ,KAAOmB,OAEXf"}