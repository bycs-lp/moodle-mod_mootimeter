{"version":3,"file":"toolmanager.min.js","sources":["../src/toolmanager.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport notification from 'core/notification';\nimport * as Util from \"mod_mootimeter/util\";\nimport Templates from 'core/templates';\nimport {get_string as getString, get_strings as getStrings} from \"core/str\";\nimport Ajax from \"../../../../lib/amd/src/ajax\";\n\n/**\n * @typedef {{id: int, tool: string, title: string, question: string,\n * sortindex: int, config: {[key: string]: any}, toolInstance?: Tool}} Page\n */\n\n/**\n * A cool tool Manager.\n *\n * @module     mod_mootimeter/toolmanager\n * @copyright  2023 Justus Dieckmann WWU\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nclass ToolManagerClass {\n\n    /** @type {{[key: string]: {constructor: Tool.constructor, label: string, settings: any}}} */\n    tools = {};\n    /** @type {{[key: number]: Page}} */\n    pages = {};\n    /** @type {int} */\n    instanceid;\n    /** @type {boolean} */\n    isEditing;\n    /** @type {{[name: string]: Setting}} */\n    settings;\n\n    elRoot;\n    /** @type HTMLElement */\n    elPagesCol\n        /** @type HTMLElement */;\n    elEditCol;\n    /** @type HTMLElement */\n    elContentCol;\n\n    strings;\n\n    async prefetch() {\n        import('mod_mootimeter/settings/select');\n        import('mod_mootimeter/settings/setting');\n        import('mod_mootimeter/settings/textarea');\n        Templates.prefetchTemplates([\n            'mod_mootimeter/settings/select',\n            'mod_mootimeter/settings/textarea',\n            'mod_mootimeter/settings_column'\n        ]);\n        getStrings([\n            {key: 'title', component: 'mod_mootimeter'},\n            {key: 'question', component: 'mod_mootimeter'},\n            {key: 'pagesettings', component: 'mod_mootimeter'},\n            {key: 'toolsettings', component: 'mod_mootimeter'},\n        ]);\n    }\n\n    async init(tools, pages, instanceid, isEditing) {\n        this.prefetch();\n\n        for (let tool of tools) {\n            this.tools[tool.name] = {\n                constructor: await import(`mootimetertool_${tool.name}/tool`),\n                settings: tool.settings,\n                label: tool.label\n            };\n        }\n        this.pages = pages;\n        this.instanceid = instanceid;\n        this.isEditing = isEditing;\n\n        this.elRoot = document.querySelector('.mootimetercontainer');\n        this.elPagesCol = this.elRoot.querySelector('.mootimetercolpages');\n        this.elEditCol = this.elRoot.querySelector('.mootimetercoledit');\n        this.elContentCol = this.elRoot.querySelector('.mootimetercolcontent');\n\n        this.elPagesCol.onclick = (e) => {\n            const element = e.target.closest('.mootimeter_pages_li');\n            if (element && element.dataset.pageid) {\n                this.route(element.dataset.pageid);\n            }\n        };\n\n        const params = new URLSearchParams(location.search);\n        if (params.has('pageid')) {\n            await this.route(params.get('pageid'), params.has('results'));\n        }\n    }\n\n    async route(pageID, results = false, noCache = false) {\n        const newUrl = new URL(location);\n        newUrl.search = '';\n        newUrl.searchParams.set('pageid', pageID);\n        if (results) {\n            newUrl.searchParams.set('results', '1');\n        }\n\n        const page = this.pages[pageID];\n        if (!page) {\n            location = newUrl;\n        }\n\n        if (!page.toolInstance || noCache) {\n            page.toolInstance = new this.tools[page.tool].constructor(page, this.isEditing);\n        }\n\n        history.pushState({}, null, newUrl);\n\n        this.elPagesCol.querySelectorAll('.mootimeter_pages_li.active')\n            .forEach(x => x.classList.remove('active'));\n        this.elPagesCol.querySelector(`.mootimeter_pages_li[data-pageid=\"${page.id}\"]`)?.classList?.add('active');\n\n        this.elContentCol.replaceChildren('plz wait');\n\n        const promises = [];\n\n        if (results) {\n            promises.push(page.toolInstance.renderResult());\n        } else {\n            promises.push(page.toolInstance.render());\n        }\n\n        if (this.isEditing) {\n            this.elEditCol.replaceChildren('plz wait');\n            promises.push(this.renderSettings(page));\n        }\n\n        const [documentFragment, settingsFragment] = await Promise.all(promises);\n\n        this.elContentCol.replaceChildren(...documentFragment.children);\n\n        if (settingsFragment) {\n            this.elEditCol.replaceChildren(...settingsFragment.children);\n        }\n    }\n\n    /**\n     *\n     * @param {Page} page\n     * @returns {Promise<HTMLElement>}\n     */\n    async renderSettings(page) {\n\n        const tools = {};\n        for (let key in this.tools) {\n            tools[key] = this.tools[key].label;\n        }\n\n        const firstsettings = [{\n            module: 'mod_mootimeter/settings/textarea',\n            config: {\n                name: 'title',\n                id: 'id_title',\n                label: await getString('title', 'mod_mootimeter'),\n                value: page.title,\n                paramtype: 'text'\n            }\n        }, {\n            module: 'mod_mootimeter/settings/textarea',\n            config: {\n                name: 'question',\n                id: 'id_question',\n                label: await getString('question', 'mod_mootimeter'),\n                value: page.question,\n                paramtype: 'text'\n            }\n        }];\n\n        const content = await Util.renderTemplate('mod_mootimeter/settings_column', {\n            accordionwrapperid: 'accordionwrapper',\n            instancename: page.title,\n            pageid: page.id,\n            section: [{\n                sectionid: 'generalsettings',\n                title: await getString('pagesettings', 'mod_mootimeter')\n            }, {\n                sectionid: 'toolsettings',\n                title: await getString('toolsettings', 'mod_mootimeter')\n            }]\n        });\n\n        const [node1, settings] = await this.renderSettingsAccordion(firstsettings, page);\n        content.querySelector('#generalsettings .card-body').append(...node1.children);\n\n        const [node2, settings2] = await this.renderSettingsAccordion(this.tools[page.tool].settings, page.config);\n        content.querySelector('#toolsettings .card-body').append(...node2.children);\n        Object.assign(settings, settings2);\n\n        content.querySelector('.savebutton').onclick = async () => {\n            const tosave = {};\n            for (let name in settings) {\n                tosave[name] = settings[name].getValue();\n            }\n\n            const responseJson = await Ajax.call([{\n                methodname: 'mod_mootimeter_save_settings',\n                args: {\n                    pageid: page.id,\n                    settings: JSON.stringify(tosave)\n                },\n                fail: notification.exception,\n            }])[0];\n\n            const response = JSON.parse(responseJson);\n\n            let hasError = false;\n\n            for (let name in settings) {\n                if (response[name]) {\n                    if (response[name].value) {\n                        settings[name].setValue(response[name].value);\n                        if (['title', 'question'].includes(name)) {\n                            page[name] = response[name].value;\n                        } else {\n                            page.config[name] = response[name].value;\n                        }\n                    } else if (response[name].error) {\n                        window.console.log(response[name].error);\n                        hasError = true;\n                    }\n                }\n            }\n\n            this.elPagesCol.querySelector(`[data-pageid=\"${page.id}\"] span`).textContent = page.title;\n\n            if (!hasError) {\n                ToolManager.route(page.id, false, true);\n            }\n        };\n\n        return content;\n    }\n\n    async renderSettingsAccordion(settingDefs, data) {\n        const content = document.createElement('div');\n\n        const promises = [];\n        for (const settingDef of settingDefs) {\n            let name = settingDef.config.name;\n            let value = data[name] ?? settingDef.config.initialvalue;\n            promises.push(\n                import(settingDef.module).then(async constructor => {\n                    const controller = new constructor({...settingDef.config}, value);\n                    const node = await controller.renderSetting();\n                    return {controller: controller, node: node};\n                }).catch(notification.exception)\n            );\n        }\n\n        const settings = {};\n\n        const resolved = await Promise.all(promises);\n        for (let i = 0; i < promises.length; i++) {\n            const {controller, node} = resolved[i];\n            content.append(...node.children);\n            settings[settingDefs[i].config.name] = controller;\n        }\n\n        return [content, settings];\n    }\n}\n\n/** @type ToolManagerClass */\nexport let ToolManager;\n\nexport const init = async(tools, pages, instanceid, isEditing) => {\n    ToolManager = new ToolManagerClass();\n    await ToolManager.init(tools, pages, instanceid, isEditing);\n};"],"names":["ToolManagerClass","prefetchTemplates","key","component","tools","pages","instanceid","isEditing","prefetch","tool","name","constructor","settings","label","elRoot","document","querySelector","elPagesCol","this","elEditCol","elContentCol","onclick","e","element","target","closest","dataset","pageid","route","params","URLSearchParams","location","search","has","get","pageID","results","noCache","newUrl","URL","searchParams","set","page","toolInstance","history","pushState","querySelectorAll","forEach","x","classList","remove","id","add","replaceChildren","promises","push","renderResult","render","renderSettings","documentFragment","settingsFragment","Promise","all","children","firstsettings","module","config","value","title","paramtype","question","content","Util","renderTemplate","accordionwrapperid","instancename","section","sectionid","node1","renderSettingsAccordion","append","node2","settings2","Object","assign","async","tosave","getValue","responseJson","Ajax","call","methodname","args","JSON","stringify","fail","notification","exception","response","parse","hasError","setValue","includes","error","window","console","log","textContent","ToolManager","settingDefs","data","createElement","settingDef","initialvalue","then","controller","node","renderSetting","catch","resolved","i","length","init"],"mappings":"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"}