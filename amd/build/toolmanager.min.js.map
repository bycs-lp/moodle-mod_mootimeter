{"version":3,"file":"toolmanager.min.js","sources":["../src/toolmanager.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport notification from 'core/notification';\nimport * as Util from \"mod_mootimeter/util\";\nimport Templates from 'core/templates';\nimport {get_string as getString, get_strings as getStrings} from \"core/str\";\n\n/**\n * @typedef {{id: int, tool: string, title: string, question: string,\n * sortindex: int, config: {[key: string]: any}, toolInstance?: Tool}} Page\n */\n\n/**\n * A cool tool Manager.\n *\n * @module     mod_mootimeter/toolmanager\n * @copyright  2023 Justus Dieckmann WWU\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nclass ToolManagerClass {\n\n    /** @type {{[key: string]: {constructor: Tool.constructor, label: string, settings: any}}} */\n    tools = {};\n    /** @type {{[key: number]: Page}} */\n    pages = {};\n    /** @type {int} */\n    instanceid;\n    /** @type {boolean} */\n    isEditing;\n    settings;\n\n    elRoot;\n    /** @type HTMLElement */\n    elPagesCol\n        /** @type HTMLElement */;\n    elEditCol;\n    /** @type HTMLElement */\n    elContentCol;\n\n    strings;\n\n    async prefetch() {\n        import('mod_mootimeter/settings/select');\n        import('mod_mootimeter/settings/setting');\n        import('mod_mootimeter/settings/textarea');\n        Templates.prefetchTemplates([\n            'mod_mootimeter/settings/select',\n            'mod_mootimeter/settings/textarea',\n            'mod_mootimeter/settings_column'\n        ]);\n        getStrings([\n            {key: 'pagetype', component: 'mod_mootimeter'},\n            {key: 'title', component: 'mod_mootimeter'},\n            {key: 'question', component: 'mod_mootimeter'},\n            {key: 'pagesettings', component: 'mod_mootimeter'},\n            {key: 'toolsettings', component: 'mod_mootimeter'},\n        ]);\n    }\n\n    async init(tools, pages, instanceid, isEditing) {\n        this.prefetch();\n\n        for (let tool of tools) {\n            this.tools[tool.name] = {\n                constructor: await import(`mootimetertool_${tool.name}/tool`),\n                settings: tool.settings,\n                label: tool.label\n            };\n        }\n        this.pages = pages;\n        this.instanceid = instanceid;\n        this.isEditing = isEditing;\n\n        this.elRoot = document.querySelector('.mootimetercontainer');\n        this.elPagesCol = this.elRoot.querySelector('.mootimetercolpages');\n        this.elEditCol = this.elRoot.querySelector('.mootimetercoledit');\n        this.elContentCol = this.elRoot.querySelector('.mootimetercolcontent');\n\n        this.elPagesCol.onclick = (e) => {\n            const element = e.target.closest('.mootimeter_pages_li');\n            if (element && element.dataset.pageid) {\n                this.route(element.dataset.pageid);\n            }\n        };\n\n        const params = new URLSearchParams(location.search);\n        if (params.has('pageid')) {\n            await this.route(params.get('pageid'), params.has('results'));\n        }\n    }\n\n    async route(pageID, results = false) {\n        const newUrl = new URL(location);\n        newUrl.search = '';\n        newUrl.searchParams.set('pageid', pageID);\n        if (results) {\n            newUrl.searchParams.set('results', '1');\n        }\n\n        const page = this.pages[pageID];\n        if (!page) {\n            location = newUrl;\n        }\n\n        if (!page.toolInstance) {\n            page.toolInstance = new this.tools[page.tool].constructor(page, this.isEditing);\n        }\n\n        history.pushState({}, null, newUrl);\n\n        this.elPagesCol.querySelectorAll('.mootimeter_pages_li.active')\n            .forEach(x => x.classList.remove('active'));\n        this.elPagesCol.querySelector(`.mootimeter_pages_li[data-pageid=\"${page.id}\"]`)?.classList?.add('active');\n\n        this.elContentCol.replaceChildren('plz wait');\n\n        const promises = [];\n\n        if (results) {\n            promises.push(page.toolInstance.renderResult());\n        } else {\n            promises.push(page.toolInstance.render());\n        }\n\n        if (this.isEditing) {\n            this.elEditCol.replaceChildren('plz wait');\n            promises.push(this.renderSettings(page));\n        }\n\n        const [documentFragment, settingsFragment] = await Promise.all(promises);\n\n        this.elContentCol.replaceChildren(...documentFragment.children);\n\n        if (settingsFragment) {\n            this.elEditCol.replaceChildren(...settingsFragment.children);\n        }\n    }\n\n    /**\n     *\n     * @param {Page} page\n     * @returns {Promise<HTMLElement>}\n     */\n    async renderSettings(page) {\n        const settings = this.tools[page.tool].settings;\n\n\n        const tools = {};\n        for (let key in this.tools) {\n            tools[key] = this.tools[key].label;\n        }\n\n        const firstsettings = [\n            {\n                module: 'mod_mootimeter/settings/select',\n                config: {\n                    elementname: 'tool',\n                    id: 'id_tool',\n                    label: await getString('pagetype', 'mod_mootimeter'),\n                    value: page.tool,\n                    options: tools\n                }\n            }, {\n                module: 'mod_mootimeter/settings/textarea',\n                config: {\n                    elementname: 'title',\n                    id: 'id_title',\n                    label: await getString('title', 'mod_mootimeter'),\n                    value: page.title,\n                    paramtype: 'text'\n                }\n            }, {\n                module: 'mod_mootimeter/settings/textarea',\n                config: {\n                    elementname: 'question',\n                    id: 'id_question',\n                    label: await getString('question', 'mod_mootimeter'),\n                    value: page.question,\n                    paramtype: 'text'\n                }\n            }\n        ];\n\n        const content = await Util.renderTemplate('mod_mootimeter/settings_column', {\n            accordionwrapperid: 'accordionwrapper',\n            instancename: page.title,\n            pageid: page.id,\n            section: [{\n                sectionid: 'generalsettings',\n                title: await getString('pagesettings', 'mod_mootimeter')\n            }, {\n                sectionid: 'toolsettings',\n                title: await getString('toolsettings', 'mod_mootimeter')\n            }]\n        });\n\n        window.console.log({\n            accordionwrapperid: 'accordionwrapper',\n            instancename: page.title,\n            pageid: page.id,\n            section: [{\n                sectionid: 'generalsettings',\n                title: await getString('pagesettings', 'mod_mootimeter')\n            }, {\n                sectionid: 'toolsettings',\n                title: await getString('toolsettings', 'mod_mootimeter')\n            }]\n        });\n\n        content.querySelector('#generalsettings .card-body')\n            .append(...(await this.renderSettingsAccordion(firstsettings, page)).children);\n\n        content.querySelector('#toolsettings .card-body')\n            .append(...(await this.renderSettingsAccordion(settings, page.config)).children);\n\n        return content;\n    }\n\n    async renderSettingsAccordion(settings, data) {\n        const content = document.createElement('div');\n\n        const promises = [];\n        for (const setting of settings) {\n            let name = setting.config.name;\n            let value = data[name] ?? setting.config.initialvalue;\n            promises.push(\n                import(setting.module).then(async constructor => {\n                    const controller = new constructor(setting.config, value);\n                    const node = await controller.renderSetting();\n                    return {controller: controller, node: node};\n                }).catch(notification.exception)\n            );\n        }\n\n        this.settings = [];\n\n        const resolved = await Promise.all(promises);\n        for (let i = 0; i < promises.length; i++) {\n            const {controller, node} = resolved[i];\n            content.append(...node.children);\n            this.settings.push({controller, node});\n        }\n\n        return content;\n    }\n}\n\n/** @type ToolManagerClass */\nexport let ToolManager;\n\nexport const init = async(tools, pages, instanceid, isEditing) => {\n    ToolManager = new ToolManagerClass();\n    await ToolManager.init(tools, pages, instanceid, isEditing);\n};"],"names":["ToolManagerClass","prefetchTemplates","key","component","tools","pages","instanceid","isEditing","prefetch","tool","name","constructor","settings","label","elRoot","document","querySelector","elPagesCol","this","elEditCol","elContentCol","onclick","e","element","target","closest","dataset","pageid","route","params","URLSearchParams","location","search","has","get","pageID","results","newUrl","URL","searchParams","set","page","toolInstance","history","pushState","querySelectorAll","forEach","x","classList","remove","id","add","replaceChildren","promises","push","renderResult","render","renderSettings","documentFragment","settingsFragment","Promise","all","children","firstsettings","module","config","elementname","value","options","title","paramtype","question","content","Util","renderTemplate","accordionwrapperid","instancename","section","sectionid","window","console","log","append","renderSettingsAccordion","data","createElement","setting","initialvalue","then","async","controller","node","renderSetting","catch","notification","exception","resolved","i","length","ToolManager","init"],"mappings":"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"}