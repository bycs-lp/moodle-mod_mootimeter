{"version":3,"file":"handle_button_clicked.min.js","sources":["../src/handle_button_clicked.js"],"sourcesContent":["import {call as fetchMany} from 'core/ajax';\nimport Log from 'core/log';\nimport ModalSaveCancel from 'core/modal_save_cancel';\nimport ModalDeleteCancel from 'core/modal_delete_cancel';\nimport ModalEvents from 'core/modal_events';\nimport {get_string as getString} from 'core/str';\nimport {execReloadPage as reloadPage} from 'mod_mootimeter/reload_page';\n\nexport const init = async(uniqueID) => {\n    var obj = document.getElementById(uniqueID);\n\n    if (!document.getElementById(uniqueID)) {\n        return;\n    }\n\n    obj.addEventListener(\"click\", buttonClicked);\n    const pageid = document.getElementById('mootimeterstate').dataset.pageid;\n    var dataset = obj.dataset;\n    var confirmationTitleStr;\n    if (!obj.getAttribute(\"data-confirmationtitlestr\")) {\n        confirmationTitleStr = getString('delete', 'core');\n    } else {\n        confirmationTitleStr = dataset.confirmationtitlestr;\n    }\n\n    var confirmationQuestionStr;\n    if (!obj.getAttribute(\"data-confirmationquestionstr\")) {\n        confirmationQuestionStr = getString('areyousure');\n    } else {\n        confirmationQuestionStr = dataset.confirmationquestionstr;\n    }\n\n    var modal;\n    if (!obj.getAttribute(\"data-confirmationtype\")) {\n        window.console.log('No confirmationtype specified! Abort!');\n        return;\n    } else {\n        switch (dataset.confirmationtype) {\n            case 'DELETE_CANCEL':\n                modal = await ModalDeleteCancel.create({\n                    title: confirmationTitleStr,\n                    body: confirmationQuestionStr,\n                    pageid: pageid,\n                });\n                break;\n            case 'SAVE_CANCEL':\n                modal = await ModalSaveCancel.create({\n                    title: confirmationTitleStr,\n                    body: confirmationQuestionStr,\n                    pageid: pageid,\n                });\n                break;\n        }\n    }\n\n    modal.getRoot().on(ModalEvents.delete, function() {\n        var uniqueID = obj.id;\n        var ajaxmethode = obj.dataset.ajaxmethode;\n\n        buttonClickedHandle(pageid, uniqueID, ajaxmethode);\n    });\n\n    modal.getRoot().on(ModalEvents.save, function() {\n        var uniqueID = obj.id;\n        var ajaxmethode = obj.dataset.ajaxmethode;\n\n        buttonClickedHandle(pageid, uniqueID, ajaxmethode);\n    });\n\n    /**\n     * Store the value.\n     */\n    function buttonClicked() {\n        modal.show();\n    }\n};\n\n/**\n * Call to store input value\n * @param {int} pageid\n * @param {string} thisDataset\n * @param {string} ajaxmethode\n * @returns {mixed}\n */\nconst execButtonClicked = (\n    pageid,\n    thisDataset,\n    ajaxmethode\n) => fetchMany([{\n    methodname: ajaxmethode,\n    args: {\n        pageid,\n        thisDataset\n    },\n}])[0];\n\n/**\n * Executes the call to store input value.\n * @param {int} pageid\n * @param {string} uniqueID\n * @param {string} ajaxmethode\n */\nconst buttonClickedHandle = async(pageid, uniqueID, ajaxmethode) => {\n    var dataset = JSON.stringify(document.getElementById(uniqueID).dataset);\n    const response = await execButtonClicked(pageid, dataset, ajaxmethode);\n\n    if (response.code != 200) {\n        Log.error(response.string);\n    }\n\n    if (response.reload == true) {\n        const queryString = window.location.search;\n        const urlParams = new URLSearchParams(queryString);\n        reloadPage(urlParams.get('pageid'), urlParams.get('id'));\n    }\n};\n"],"names":["async","obj","document","getElementById","uniqueID","addEventListener","modal","show","pageid","dataset","confirmationTitleStr","confirmationQuestionStr","getAttribute","confirmationtitlestr","confirmationquestionstr","confirmationtype","ModalDeleteCancel","create","title","body","ModalSaveCancel","getRoot","on","ModalEvents","delete","id","ajaxmethode","buttonClickedHandle","save","window","console","log","JSON","stringify","response","thisDataset","methodname","args","execButtonClicked","code","error","string","reload","queryString","location","search","urlParams","URLSearchParams","get"],"mappings":"2qBAQoBA,MAAAA,eACZC,IAAMC,SAASC,eAAeC,cAE7BF,SAASC,eAAeC,iBAI7BH,IAAII,iBAAiB,oBA0DjBC,MAAMC,gBAzDJC,OAASN,SAASC,eAAe,mBAAmBM,QAAQD,WAE9DE,qBAOAC,wBAOAL,MAfAG,QAAUR,IAAIQ,WAKdC,qBAHCT,IAAIW,aAAa,6BAGKH,QAAQI,sBAFR,mBAAU,SAAU,QAS3CF,wBAHCV,IAAIW,aAAa,gCAGQH,QAAQK,yBAFR,mBAAU,cAMnCb,IAAIW,aAAa,iCAIVH,QAAQM,sBACP,gBACDT,YAAcU,6BAAkBC,OAAO,CACnCC,MAAOR,qBACPS,KAAMR,wBACNH,OAAQA,mBAGX,cACDF,YAAcc,2BAAgBH,OAAO,CACjCC,MAAOR,qBACPS,KAAMR,wBACNH,OAAQA,SAMxBF,MAAMe,UAAUC,GAAGC,sBAAYC,QAAQ,eAC/BpB,SAAWH,IAAIwB,GACfC,YAAczB,IAAIQ,QAAQiB,YAE9BC,oBAAoBnB,OAAQJ,SAAUsB,gBAG1CpB,MAAMe,UAAUC,GAAGC,sBAAYK,MAAM,eAC7BxB,SAAWH,IAAIwB,GACfC,YAAczB,IAAIQ,QAAQiB,YAE9BC,oBAAoBnB,OAAQJ,SAAUsB,qBAhCtCG,OAAOC,QAAQC,IAAI,gDAoErBJ,oBAAsB3B,MAAMQ,OAAQJ,SAAUsB,mBAC5CjB,QAAUuB,KAAKC,UAAU/B,SAASC,eAAeC,UAAUK,eACzDyB,cApBgB,EACtB1B,OACA2B,YACAT,eACC,cAAU,CAAC,CACZU,WAAYV,YACZW,KAAM,CACF7B,OAAAA,OACA2B,YAAAA,gBAEJ,GAUuBG,CAAkB9B,OAAQC,QAASiB,gBAErC,KAAjBQ,SAASK,mBACLC,MAAMN,SAASO,QAGA,GAAnBP,SAASQ,OAAgB,OACnBC,YAAcd,OAAOe,SAASC,OAC9BC,UAAY,IAAIC,gBAAgBJ,6CAC3BG,UAAUE,IAAI,UAAWF,UAAUE,IAAI"}