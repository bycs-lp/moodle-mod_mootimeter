{"version":3,"file":"handle_button_clicked.min.js","sources":["../src/handle_button_clicked.js"],"sourcesContent":["import {call as fetchMany} from 'core/ajax';\nimport Log from 'core/log';\nimport ModalSaveCancel from 'core/modal_save_cancel';\nimport ModalDeleteCancel from 'core/modal_delete_cancel';\nimport ModalEvents from 'core/modal_events';\nimport {get_string as getString} from 'core/str';\nimport {execReloadPage as reloadPage} from 'mod_mootimeter/reload_page';\n\nexport const init = async (uniqueID) => {\n    var obj = document.getElementById(uniqueID);\n\n    if (!document.getElementById(uniqueID)) {\n        return;\n    }\n\n    const pageid = document.getElementById('mootimeterstate').dataset.pageid;\n    var dataset = obj.dataset;\n    var confirmationTitleStr;\n    var modal;\n\n    if (obj.getAttribute(\"data-confirmationtype\")) {\n\n        obj.addEventListener(\"click\", showModal);\n\n        if (!obj.getAttribute(\"data-confirmationtitlestr\")) {\n            confirmationTitleStr = getString('delete', 'core');\n        } else {\n            confirmationTitleStr = dataset.confirmationtitlestr;\n        }\n\n        var confirmationQuestionStr;\n        if (!obj.getAttribute(\"data-confirmationquestionstr\")) {\n            confirmationQuestionStr = getString('areyousure');\n        } else {\n            confirmationQuestionStr = dataset.confirmationquestionstr;\n        }\n\n\n        switch (dataset.confirmationtype) {\n            case 'DELETE_CANCEL':\n                modal = await ModalDeleteCancel.create({\n                    title: confirmationTitleStr,\n                    body: confirmationQuestionStr,\n                    pageid: pageid,\n                });\n                break;\n            case 'SAVE_CANCEL':\n                modal = await ModalSaveCancel.create({\n                    title: confirmationTitleStr,\n                    body: confirmationQuestionStr,\n                    pageid: pageid,\n                });\n                break;\n        }\n\n        modal.getRoot().on(ModalEvents.delete, function() {\n            var uniqueID = obj.id;\n            var ajaxmethode = obj.dataset.ajaxmethode;\n\n            buttonClickedHandle(pageid, uniqueID, ajaxmethode);\n        });\n\n        modal.getRoot().on(ModalEvents.save, function() {\n            var uniqueID = obj.id;\n            var ajaxmethode = obj.dataset.ajaxmethode;\n\n            buttonClickedHandle(pageid, uniqueID, ajaxmethode);\n        });\n\n    } else {\n        obj.addEventListener(\"click\", buttonClicked);\n    }\n\n    /**\n     * Handle Button clicked event.\n     */\n    function buttonClicked() {\n        const pageid = document.getElementById('mootimeterstate').dataset.pageid;\n        var uniqueID = obj.id;\n        var ajaxmethode = obj.dataset.ajaxmethode;\n        buttonClickedHandle(pageid, uniqueID, ajaxmethode);\n    }\n\n    /**\n     * Store the value.\n     */\n    function showModal() {\n        modal.show();\n    }\n};\n\n/**\n * Call to store input value\n * @param {int} pageid\n * @param {string} thisDataset\n * @param {string} ajaxmethode\n * @returns {mixed}\n */\nconst execButtonClicked = (\n    pageid,\n    thisDataset,\n    ajaxmethode\n) => fetchMany([{\n    methodname: ajaxmethode,\n    args: {\n        pageid,\n        thisDataset\n    },\n}])[0];\n\n/**\n * Executes the call to store input value.\n * @param {int} pageid\n * @param {string} uniqueID\n * @param {string} ajaxmethode\n */\nconst buttonClickedHandle = async(pageid, uniqueID, ajaxmethode) => {\n    var dataset = JSON.stringify(document.getElementById(uniqueID).dataset);\n    const response = await execButtonClicked(pageid, dataset, ajaxmethode);\n\n    if (response.code != 200) {\n        Log.error(response.string);\n    }\n\n    if (response.reload == true) {\n        const queryString = window.location.search;\n        const urlParams = new URLSearchParams(queryString);\n        reloadPage(urlParams.get('pageid'), urlParams.get('id'));\n    }\n};\n"],"names":["async","obj","document","getElementById","uniqueID","pageid","dataset","confirmationTitleStr","modal","getAttribute","confirmationQuestionStr","addEventListener","show","confirmationtitlestr","confirmationquestionstr","confirmationtype","ModalDeleteCancel","create","title","body","ModalSaveCancel","getRoot","on","ModalEvents","delete","id","ajaxmethode","buttonClickedHandle","save","JSON","stringify","response","thisDataset","methodname","args","execButtonClicked","code","error","string","reload","queryString","window","location","search","urlParams","URLSearchParams","get"],"mappings":"2qBAQoBA,MAAAA,eACZC,IAAMC,SAASC,eAAeC,cAE7BF,SAASC,eAAeC,uBAIvBC,OAASH,SAASC,eAAe,mBAAmBG,QAAQD,WAE9DE,qBACAC,MAFAF,QAAUL,IAAIK,WAIdL,IAAIQ,aAAa,yBAA0B,KAUvCC,+BARJT,IAAIU,iBAAiB,oBAiErBH,MAAMI,UA5DFL,qBAHCN,IAAIQ,aAAa,6BAGKH,QAAQO,sBAFR,mBAAU,SAAU,QAS3CH,wBAHCT,IAAIQ,aAAa,gCAGQH,QAAQQ,yBAFR,mBAAU,cAMhCR,QAAQS,sBACP,gBACDP,YAAcQ,6BAAkBC,OAAO,CACnCC,MAAOX,qBACPY,KAAMT,wBACNL,OAAQA,mBAGX,cACDG,YAAcY,2BAAgBH,OAAO,CACjCC,MAAOX,qBACPY,KAAMT,wBACNL,OAAQA,SAKpBG,MAAMa,UAAUC,GAAGC,sBAAYC,QAAQ,eAC/BpB,SAAWH,IAAIwB,GACfC,YAAczB,IAAIK,QAAQoB,YAE9BC,oBAAoBtB,OAAQD,SAAUsB,gBAG1ClB,MAAMa,UAAUC,GAAGC,sBAAYK,MAAM,eAC7BxB,SAAWH,IAAIwB,GACfC,YAAczB,IAAIK,QAAQoB,YAE9BC,oBAAoBtB,OAAQD,SAAUsB,qBAI1CzB,IAAIU,iBAAiB,0BAOfN,OAASH,SAASC,eAAe,mBAAmBG,QAAQD,WAC9DD,SAAWH,IAAIwB,GACfC,YAAczB,IAAIK,QAAQoB,YAC9BC,oBAAoBtB,OAAQD,SAAUsB,uBAoCxCC,oBAAsB3B,MAAMK,OAAQD,SAAUsB,mBAC5CpB,QAAUuB,KAAKC,UAAU5B,SAASC,eAAeC,UAAUE,eACzDyB,cApBgB,EACtB1B,OACA2B,YACAN,eACC,cAAU,CAAC,CACZO,WAAYP,YACZQ,KAAM,CACF7B,OAAAA,OACA2B,YAAAA,gBAEJ,GAUuBG,CAAkB9B,OAAQC,QAASoB,gBAErC,KAAjBK,SAASK,mBACLC,MAAMN,SAASO,QAGA,GAAnBP,SAASQ,OAAgB,OACnBC,YAAcC,OAAOC,SAASC,OAC9BC,UAAY,IAAIC,gBAAgBL,6CAC3BI,UAAUE,IAAI,UAAWF,UAAUE,IAAI"}