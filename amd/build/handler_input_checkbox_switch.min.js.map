{"version":3,"file":"handler_input_checkbox_switch.min.js","sources":["../src/handler_input_checkbox_switch.js"],"sourcesContent":["import {call as fetchMany} from 'core/ajax';\nimport Log from 'core/log';\n\nexport const init = (uniqueID) => {\n    const obj = document.getElementById(uniqueID);\n\n    if (!document.getElementById(uniqueID)) {\n        return;\n    }\n\n    obj.addEventListener('click', store);\n\n    /**\n     * Store the value.\n     */\n    function store() {\n        const id = this.id;\n\n        const pageid = this.dataset.pageid;\n        const ajaxmethod = this.dataset.ajaxmethod;\n        const inputname = this.dataset.name;\n        let inputvalue = 0;\n        const thisDataset = JSON.stringify(this.dataset);\n\n        if (document.getElementById(id).checked) {\n            inputvalue = 1;\n        }\n        return setCbState(ajaxmethod, pageid, inputname, inputvalue, thisDataset);\n    }\n};\n\n/**\n * Executes the call to store cb state.\n * @param {string} ajaxmethod\n * @param {int} pageid\n * @param {string} inputname\n * @param {string} inputvalue\n * @param {string} thisDataset\n * @returns\n */\nconst execSetCbState = (\n    ajaxmethod,\n    pageid,\n    inputname,\n    inputvalue,\n    thisDataset\n) => fetchMany([{\n    methodname: ajaxmethod,\n    args: {\n        pageid,\n        inputname,\n        inputvalue,\n        thisDataset\n    },\n}])[0];\n\n/**\n * Store cb state.\n * @param {string} ajaxmethod\n * @param {int} pageid\n * @param {string} inputname\n * @param {string} inputvalue\n * @param {string} thisDataset\n */\nconst setCbState = async(ajaxmethod, pageid, inputname, inputvalue, thisDataset) => {\n    const response = await execSetCbState(ajaxmethod, pageid, inputname, inputvalue, thisDataset);\n    if (response.code != 200) {\n        Log.error(response.string);\n    }\n};"],"names":["uniqueID","obj","document","getElementById","addEventListener","id","this","pageid","dataset","ajaxmethod","inputname","name","inputvalue","thisDataset","JSON","stringify","checked","setCbState","async","response","methodname","args","execSetCbState","code","error","string"],"mappings":"6QAGqBA,iBACXC,IAAMC,SAASC,eAAeH,UAE/BE,SAASC,eAAeH,WAI7BC,IAAIG,iBAAiB,0BAMXC,GAAKC,KAAKD,GAEVE,OAASD,KAAKE,QAAQD,OACtBE,WAAaH,KAAKE,QAAQC,WAC1BC,UAAYJ,KAAKE,QAAQG,SAC3BC,WAAa,QACXC,YAAcC,KAAKC,UAAUT,KAAKE,SAEpCN,SAASC,eAAeE,IAAIW,UAC5BJ,WAAa,UAEVK,WAAWR,WAAYF,OAAQG,UAAWE,WAAYC,uBAqC/DI,WAAaC,MAAMT,WAAYF,OAAQG,UAAWE,WAAYC,qBAC1DM,cAzBa,EACnBV,WACAF,OACAG,UACAE,WACAC,eACC,cAAU,CAAC,CACZO,WAAYX,WACZY,KAAM,CACFd,OAAAA,OACAG,UAAAA,UACAE,WAAAA,WACAC,YAAAA,gBAEJ,GAWuBS,CAAeb,WAAYF,OAAQG,UAAWE,WAAYC,aAC5D,KAAjBM,SAASI,mBACLC,MAAML,SAASM"}