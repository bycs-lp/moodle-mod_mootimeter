{"version":3,"file":"handle_clicked_element_use_dataset.min.js","sources":["../src/handle_clicked_element_use_dataset.js"],"sourcesContent":["import {call as fetchMany} from 'core/ajax';\nimport Log from 'core/log';\nimport {execReloadPage as reloadPage} from 'mod_mootimeter/reload_page';\n\nexport const init = (uniqueID) => {\n    const obj = document.getElementById(uniqueID);\n\n    if (!document.getElementById(uniqueID)) {\n        return;\n    }\n\n    obj.addEventListener(\"click\", mootimeterStoreData);\n\n    /**\n     * Store the value.\n     * @returns {mixed}\n     */\n    function mootimeterStoreData() {\n        const mtmstate = document.getElementById('mootimeterstate').dataset;\n        const pageid = mtmstate.pageid;\n        const ajaxmethode = obj.dataset.ajaxmethode;\n        const inputname = obj.dataset.name;\n        const inputvalue = obj.dataset.value;\n        const thisDataset = JSON.stringify(obj.dataset);\n        return execStoreDataValue(ajaxmethode, pageid, inputname, inputvalue, thisDataset);\n    }\n};\n\n/**\n * Call to store input value\n * @param {string} ajaxmethode\n * @param {int} pageid\n * @param {string} inputname\n * @param {string} inputvalue\n * @param {string} thisDataset\n * @returns {mixed}\n */\nconst storeDataValue = (\n    ajaxmethode,\n    pageid,\n    inputname,\n    inputvalue,\n    thisDataset\n) => fetchMany([{\n    methodname: ajaxmethode,\n    args: {\n        pageid,\n        inputname,\n        inputvalue,\n        thisDataset\n    },\n}])[0];\n\n/**\n * Executes the call to store input value.\n * @param {string} ajaxmethode\n * @param {int} pageid\n * @param {string} inputname\n * @param {string} inputvalue\n * @param {string} thisDataset\n */\nconst execStoreDataValue = async(ajaxmethode, pageid, inputname, inputvalue, thisDataset) => {\n\n    const response = await storeDataValue(ajaxmethode, pageid, inputname, inputvalue, thisDataset);\n\n    if (response.code != 200) {\n        Log.error(response.string);\n    }\n\n    if (response.code == 200) {\n        Log.info(response.string);\n    }\n\n    let options = [];\n    if (response.options) {\n        options = JSON.parse(response.options);\n    }\n\n    if (response.reload == true || options.reload == true) {\n        const queryString = window.location.search;\n        const urlParams = new URLSearchParams(queryString);\n        reloadPage(urlParams.get('pageid'), urlParams.get('id'));\n    }\n};\n"],"names":["uniqueID","obj","document","getElementById","addEventListener","pageid","dataset","ajaxmethode","inputname","name","inputvalue","value","thisDataset","JSON","stringify","execStoreDataValue","async","response","methodname","args","storeDataValue","code","error","string","info","options","parse","reload","queryString","window","location","search","urlParams","URLSearchParams","get"],"mappings":"4TAIqBA,iBACXC,IAAMC,SAASC,eAAeH,UAE/BE,SAASC,eAAeH,WAI7BC,IAAIG,iBAAiB,0BAQXC,OADWH,SAASC,eAAe,mBAAmBG,QACpCD,OAClBE,YAAcN,IAAIK,QAAQC,YAC1BC,UAAYP,IAAIK,QAAQG,KACxBC,WAAaT,IAAIK,QAAQK,MACzBC,YAAcC,KAAKC,UAAUb,IAAIK,gBAChCS,mBAAmBR,YAAaF,OAAQG,UAAWE,WAAYE,uBAqCxEG,mBAAqBC,MAAMT,YAAaF,OAAQG,UAAWE,WAAYE,qBAEnEK,cA1Ba,EACnBV,YACAF,OACAG,UACAE,WACAE,eACC,cAAU,CAAC,CACZM,WAAYX,YACZY,KAAM,CACFd,OAAAA,OACAG,UAAAA,UACAE,WAAAA,WACAE,YAAAA,gBAEJ,GAYuBQ,CAAeb,YAAaF,OAAQG,UAAWE,WAAYE,aAE7D,KAAjBK,SAASI,mBACLC,MAAML,SAASM,QAGF,KAAjBN,SAASI,mBACLG,KAAKP,SAASM,YAGlBE,QAAU,MACVR,SAASQ,UACTA,QAAUZ,KAAKa,MAAMT,SAASQ,UAGX,GAAnBR,SAASU,QAAoC,GAAlBF,QAAQE,OAAgB,OAC7CC,YAAcC,OAAOC,SAASC,OAC9BC,UAAY,IAAIC,gBAAgBL,6CAC3BI,UAAUE,IAAI,UAAWF,UAAUE,IAAI"}