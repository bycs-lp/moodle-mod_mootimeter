{"version":3,"file":"utility.min.js","sources":["../src/utility.js"],"sourcesContent":["import { call as fetchMany } from 'core/ajax';\n\nconst mtmtQuizAddEventlistenerHandleAnswers = (dataset, type, field) => {\n\n    var aos = document.getElementsByClassName('mootimeter-answer-options');\n\n    for (let i = 0; i < aos.length; i++) {\n        // Remove old listener if exists.\n        aos[i].removeEventListener(\"click\", count_up);\n        // Finally add the new listener.\n        aos[i].addEventListener(\"click\", count_up);\n    }\n\n}\n\nexport const init = () => {\n\n    // Get all up elements.\n    var ao = document.getElementById('add_answer_option');\n    ao.addEventListener(\"click\", store);\n\n    /**\n     * Create new page.\n     */\n    function store() {\n        var pageid = this.dataset.pageid;\n        storeNewAnswerOption(pageid);\n    }\n};\n\n/**\n * Call to create a new instance\n * @param {int} pageid\n * @returns\n */\nconst execStoreNewAnswerOption = (\n    pageid,\n) => fetchMany([{\n    methodname: 'mootimetertool_quiz_new_answeroption',\n    args: {\n        pageid,\n    },\n}])[0];\n\n/**\n * Executes the call to create a new page.\n * @param {int} pageid\n */\nconst storeNewAnswerOption = async (pageid) => {\n    const response = await execStoreNewAnswerOption(pageid);\n}"],"names":["document","getElementById","addEventListener","pageid","this","dataset","storeNewAnswerOption","async","methodname","args","execStoreNewAnswerOption"],"mappings":"kLAeoB,KAGPA,SAASC,eAAe,qBAC9BC,iBAAiB,wBAMZC,OAASC,KAAKC,QAAQF,OAC1BG,qBAAqBH,kBAsBvBG,qBAAuBC,MAAAA,cAZzBJ,CAAAA,SACC,cAAU,CAAC,CACZK,WAAY,uCACZC,KAAM,CACFN,OAAAA,WAEJ,GAOuBO,CAAyBP"}