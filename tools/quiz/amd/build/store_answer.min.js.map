{"version":3,"file":"store_answer.min.js","sources":["../src/store_answer.js"],"sourcesContent":["import { call as fetchMany } from 'core/ajax';\nimport Templates from 'core/templates';\nimport { get_string as getString } from 'core/str';\n\nexport const init = () => {\n\n    // Get all up elements.\n    var submitbtn = document.getElementById('mtmt_store_answer');\n\n    if (!submitbtn) {\n        return;\n    }\n\n    submitbtn.addEventListener(\"click\", store);\n\n    /**\n     * Create new page.\n     */\n    function store() {\n        const selectedanswerids = [];\n        var pageid = this.dataset.pageid;\n        var checkboxes = document.getElementsByName('multipleanswers[]');\n        window.console.log(pageid);\n        window.console.log(checkboxes);\n        for (var checkbox of checkboxes) {\n            if (checkbox.checked) {\n                selectedanswerids.push(checkbox.value);\n            }\n        }\n        storeAnswer(pageid, selectedanswerids);\n    }\n\n};\n\n/**\n * Call to create a new instance\n * @param {int} pageid\n * @param {string} selectedanswerids\n * @returns\n */\nconst execStoreAnswer = (\n    pageid,\n    aoids\n) => fetchMany([{\n    methodname: 'mootimetertool_quiz_store_answer',\n    args: {\n        pageid,\n        aoids\n    },\n}])[0];\n\n/**\n * Executes the call to create a new page.\n * @param {int} pageid\n * @param {array} selectedanswerids\n */\nconst storeAnswer = async (pageid, selectedanswerids) => {\n    selectedanswerids = JSON.stringify(selectedanswerids);\n    window.console.log(['selectedanswers', selectedanswerids]);\n\n    const SuccessString = await getString('notification_success_store_answer', 'mod_mootimeter');\n    const response = await execStoreAnswer(pageid, selectedanswerids);\n    if (response.code != 200) {\n        window.console.log(response.string);\n    }\n    if (response.code == 200) {\n        renderInfoBox('success', SuccessString, '');\n    }\n};\n\n/**\n * Generate an info box.\n * @param {string} notificationType\n * @param {string} notificationString\n * @param {string} icon\n */\nfunction renderInfoBox(notificationType, notificationString, icon) {\n\n    const context = {\n        \"notification_id\": \"mtmt_answer_warning\",\n        \"notification_type\": notificationType,\n        \"notification_icon\": icon,\n        \"notification_text\": notificationString\n    };\n\n    Templates.renderForPromise('mod_mootimeter/elements/snippet_notification', context)\n        .then(({ html, js }) => {\n            Templates.appendNodeContents('#mtmt_tool-colct-header', html, js);\n            return true;\n        })\n        .catch((error) => displayException(error));\n}\n"],"names":["submitbtn","document","getElementById","addEventListener","selectedanswerids","pageid","this","dataset","checkboxes","getElementsByName","checkbox","window","console","log","checked","push","value","storeAnswer","async","JSON","stringify","SuccessString","response","aoids","methodname","args","execStoreAnswer","code","string","notificationType","notificationString","icon","context","renderForPromise","then","_ref","html","js","appendNodeContents","catch","error","displayException","renderInfoBox"],"mappings":"ySAIoB,SAGZA,UAAYC,SAASC,eAAe,qBAEnCF,WAILA,UAAUG,iBAAiB,0BAMjBC,kBAAoB,OACtBC,OAASC,KAAKC,QAAQF,OACtBG,WAAaP,SAASQ,kBAAkB,yBAGvC,IAAIC,YAFTC,OAAOC,QAAQC,IAAIR,QACnBM,OAAOC,QAAQC,IAAIL,YACEA,YACbE,SAASI,SACTV,kBAAkBW,KAAKL,SAASM,OAGxCC,YAAYZ,OAAQD,6BA2BtBa,YAAcC,MAAOb,OAAQD,qBAC/BA,kBAAoBe,KAAKC,UAAUhB,mBACnCO,OAAOC,QAAQC,IAAI,CAAC,kBAAmBT,0BAEjCiB,oBAAsB,mBAAU,oCAAqC,kBACrEC,cArBc,EACpBjB,OACAkB,SACC,cAAU,CAAC,CACZC,WAAY,mCACZC,KAAM,CACFpB,cACAkB,gBAEJ,GAYuBG,CAAgBrB,OAAQD,mBAC1B,KAAjBkB,SAASK,MACThB,OAAOC,QAAQC,IAAIS,SAASM,QAEX,KAAjBN,SAASK,eAWME,iBAAkBC,mBAAoBC,YAEnDC,QAAU,iBACO,wCACEH,mCACAE,uBACAD,uCAGfG,iBAAiB,+CAAgDD,SACtEE,MAAKC,WAACC,KAAEA,KAAFC,GAAQA,mCACDC,mBAAmB,0BAA2BF,KAAMC,KACvD,CAAP,IAEHE,OAAOC,OAAUC,iBAAiBD,SAxBnCE,CAAc,UAAWrB,cAAe"}