{"version":3,"file":"store_answer.min.js","sources":["../src/store_answer.js"],"sourcesContent":["import {call as fetchMany} from 'core/ajax';\nimport {exception as displayException} from 'core/notification';\nimport {get_string as getString} from 'core/str';\nimport Templates from 'core/templates';\nimport Log from 'core/log';\n\nexport const init = () => {\n\n    // Get all up elements.\n    const submitbtn = document.getElementById('mtmt_store_answer');\n\n    if (!submitbtn) {\n        return;\n    }\n\n    submitbtn.addEventListener(\"click\", store);\n\n    /**\n     * Create new page.\n     */\n    function store() {\n        const selectedanswerids = [];\n        const pageid = this.dataset.pageid;\n        const checkboxes = document.getElementsByName('multipleanswers[]');\n        for (const checkbox of checkboxes) {\n            if (checkbox.checked) {\n                selectedanswerids.push(checkbox.value);\n            }\n        }\n        return storeAnswer(pageid, selectedanswerids);\n    }\n\n};\n\n/**\n * Call to create a new instance\n *\n * @param {int} pageid\n * @param {[]} aoids\n * @returns\n */\nconst execStoreAnswer = (\n    pageid,\n    aoids\n) => fetchMany([{\n    methodname: 'mootimetertool_quiz_store_answer',\n    args: {\n        pageid,\n        aoids\n    },\n}])[0];\n\n/**\n * Executes the call to create a new page.\n * @param {int} pageid\n * @param {array} selectedanswerids\n */\nconst storeAnswer = async (pageid, selectedanswerids) => {\n    removeInfoBox();\n\n    selectedanswerids = JSON.stringify(selectedanswerids);\n\n    const successString = await getString('notification_success_store_answer', 'mod_mootimeter');\n    const response = await execStoreAnswer(pageid, selectedanswerids);\n    if (response.code != 200) {\n        Log.error(response.string);\n    }\n    if (response.code == 200) {\n        renderInfoBox('success', successString, '');\n    }\n};\n\n/**\n * Generate an info box.\n * @param {string} notificationType\n * @param {string} notificationString\n * @param {string} icon\n */\nfunction renderInfoBox(notificationType, notificationString, icon) {\n\n    const context = {\n        \"notification_id\": \"mtmt_answer_warning\",\n        \"notification_type\": notificationType,\n        \"notification_icon\": icon,\n        \"notification_text\": notificationString\n    };\n\n    Templates.renderForPromise('mod_mootimeter/elements/snippet_notification', context)\n        .then(({html, js}) => {\n            Templates.appendNodeContents('#mtmt_tool-colct-header', html, js);\n            return true;\n        })\n        .catch((error) => displayException(error));\n}\n\n/**\n * Remove the info box.\n */\nfunction removeInfoBox() {\n    var infobox = document.getElementById(\"mtmt_answer_warning\");\n    if (infobox) {\n        infobox.remove();\n    }\n}\n"],"names":["submitbtn","document","getElementById","addEventListener","selectedanswerids","pageid","this","dataset","checkboxes","getElementsByName","checkbox","checked","push","value","storeAnswer","async","infobox","remove","JSON","stringify","successString","response","aoids","methodname","args","execStoreAnswer","code","error","string","notificationType","notificationString","icon","context","renderForPromise","then","_ref","html","js","appendNodeContents","catch","renderInfoBox"],"mappings":"ubAMoB,WAGVA,UAAYC,SAASC,eAAe,qBAErCF,WAILA,UAAUG,iBAAiB,0BAMjBC,kBAAoB,GACpBC,OAASC,KAAKC,QAAQF,OACtBG,WAAaP,SAASQ,kBAAkB,yBACzC,MAAMC,YAAYF,WACfE,SAASC,SACTP,kBAAkBQ,KAAKF,SAASG,cAGjCC,YAAYT,OAAQD,6BA4B7BU,YAAcC,MAAOV,OAAQD,yBA0C3BY,iBAAUf,SAASC,eAAe,yBAElCc,QAAQC,SAzCZb,kBAAoBc,KAAKC,UAAUf,yBAE7BgB,oBAAsB,mBAAU,oCAAqC,kBACrEC,cAtBc,EACpBhB,OACAiB,SACC,cAAU,CAAC,CACZC,WAAY,mCACZC,KAAM,CACFnB,cACAiB,gBAEJ,GAauBG,CAAgBpB,OAAQD,mBAC1B,KAAjBiB,SAASK,mBACLC,MAAMN,SAASO,QAEF,KAAjBP,SAASK,eAWMG,iBAAkBC,mBAAoBC,YAEnDC,QAAU,iBACO,wCACEH,mCACAE,uBACAD,uCAGfG,iBAAiB,+CAAgDD,SACtEE,MAAKC,WAACC,KAACA,KAADC,GAAOA,mCACAC,mBAAmB,0BAA2BF,KAAMC,KACvD,CAAP,IAEHE,OAAOZ,QAAU,2BAAiBA,SAxBnCa,CAAc,UAAWpB,cAAe"}