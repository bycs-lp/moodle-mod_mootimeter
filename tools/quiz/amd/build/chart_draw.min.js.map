{"version":3,"file":"chart_draw.min.js","sources":["../src/chart_draw.js"],"sourcesContent":["import ChartJS from 'mootimetertool_quiz/chart.umd';\nimport {call as fetchMany} from 'core/ajax';\n\nexport const init = (id) => {\n\n    if (!document.getElementById(id)) {\n        return;\n    }\n\n    const pageid = document.getElementById(id).dataset.pageid;\n    let lastposttimestamp = parseInt(document.getElementById('mootimeterstate').dataset.lastupdated);\n    getAnswers(pageid, lastposttimestamp, id);\n\n    var interval = setInterval(() => {\n        lastposttimestamp = parseInt(document.getElementById('mootimeterstate').dataset.lastupdated);\n        getAnswers(pageid, lastposttimestamp, id);\n        if (!document.getElementById(id)) {\n            clearInterval(interval);\n        }\n    }, document.getElementById('mootimeterstate').dataset.refreshinterval);\n};\n\n\n/**\n * Execute the ajax call to get the aswers and more important data.\n * @param {int} pageid\n * @returns {mixed}\n */\nconst execGetAnswers = (\n    pageid,\n) => fetchMany([{\n    methodname: 'mootimetertool_quiz_get_answers',\n    args: {\n        pageid,\n    },\n}])[0];\n\n/**\n * Get the answers and other important data, as well as processing them.\n * @param {int} pageid\n * @param {int} lastposttimestamp\n * @param {string} id\n * @returns {mixed}\n */\nconst getAnswers = async(pageid, lastposttimestamp, id) => {\n    const response = await execGetAnswers(pageid);\n\n    if (!document.getElementById(id)) {\n        return;\n    }\n\n    // We do not want to do anything if nothing has changed.\n    if (\n        lastposttimestamp == response.lastupdated\n        &&\n        response.chartsettings == document.getElementById(id).dataset.chartsettings\n        &&\n        response.values == document.getElementById(id).dataset.values\n        &&\n        response.labels == document.getElementById(id).dataset.labels\n    ) {\n        return;\n    }\n\n    // Write the new data to the canvas data attributes.\n    let nodelastupdated = document.getElementById('mootimeterstate');\n    nodelastupdated.setAttribute('data-lastupdated', response.lastupdated);\n\n    let nodecanvas = document.getElementById(id);\n    nodecanvas.setAttribute('data-labels', response.labels);\n    nodecanvas.setAttribute('data-values', response.values);\n    nodecanvas.setAttribute('data-chartsettings', response.chartsettings);\n\n    // (Re-)Draw the chart.\n    var config = {\n        type: JSON.parse(response.chartsettings).charttype,\n        data: {\n            labels: JSON.parse(response.labels),\n            datasets: [{\n                label: response.question,\n                data: JSON.parse(response.values),\n                backgroundColor: JSON.parse(response.chartsettings).backgroundColor,\n                borderRadius: JSON.parse(response.chartsettings).borderRadius,\n                pointStyle: JSON.parse(response.chartsettings).pointStyle,\n                pointRadius: JSON.parse(response.chartsettings).pointRadius,\n                pointHoverRadius: JSON.parse(response.chartsettings).pointHoverRadius,\n            }]\n        },\n        options: JSON.parse(response.chartsettings).options\n    };\n\n    let chartStatus = ChartJS.getChart(id); // <canvas> id\n    if (chartStatus != undefined) {\n        chartStatus.destroy();\n    }\n\n    new ChartJS(document.getElementById(id), config);\n    ChartJS.defaults.font.size = 25;\n    ChartJS.defaults.stepSize = 1;\n};"],"names":["id","document","getElementById","pageid","dataset","lastposttimestamp","parseInt","lastupdated","getAnswers","interval","setInterval","clearInterval","refreshinterval","async","response","methodname","args","execGetAnswers","chartsettings","values","labels","setAttribute","nodecanvas","config","type","JSON","parse","charttype","data","datasets","label","question","backgroundColor","borderRadius","pointStyle","pointRadius","pointHoverRadius","options","chartStatus","ChartJS","getChart","undefined","destroy","defaults","font","size","stepSize"],"mappings":"0RAGqBA,SAEZC,SAASC,eAAeF,iBAIvBG,OAASF,SAASC,eAAeF,IAAII,QAAQD,WAC/CE,kBAAoBC,SAASL,SAASC,eAAe,mBAAmBE,QAAQG,aACpFC,WAAWL,OAAQE,kBAAmBL,QAElCS,SAAWC,aAAY,KACvBL,kBAAoBC,SAASL,SAASC,eAAe,mBAAmBE,QAAQG,aAChFC,WAAWL,OAAQE,kBAAmBL,IACjCC,SAASC,eAAeF,KACzBW,cAAcF,YAEnBR,SAASC,eAAe,mBAAmBE,QAAQQ,wBAyBpDJ,WAAaK,MAAMV,OAAQE,kBAAmBL,YAC1Cc,cAhBNX,CAAAA,SACC,cAAU,CAAC,CACZY,WAAY,kCACZC,KAAM,CACFb,OAAAA,WAEJ,GAUuBc,CAAed,YAEjCF,SAASC,eAAeF,cAMzBK,mBAAqBS,SAASP,aAE9BO,SAASI,eAAiBjB,SAASC,eAAeF,IAAII,QAAQc,eAE9DJ,SAASK,QAAUlB,SAASC,eAAeF,IAAII,QAAQe,QAEvDL,SAASM,QAAUnB,SAASC,eAAeF,IAAII,QAAQgB,cAMrCnB,SAASC,eAAe,mBAC9BmB,aAAa,mBAAoBP,SAASP,iBAEtDe,WAAarB,SAASC,eAAeF,IACzCsB,WAAWD,aAAa,cAAeP,SAASM,QAChDE,WAAWD,aAAa,cAAeP,SAASK,QAChDG,WAAWD,aAAa,qBAAsBP,SAASI,mBAGnDK,OAAS,CACTC,KAAMC,KAAKC,MAAMZ,SAASI,eAAeS,UACzCC,KAAM,CACFR,OAAQK,KAAKC,MAAMZ,SAASM,QAC5BS,SAAU,CAAC,CACPC,MAAOhB,SAASiB,SAChBH,KAAMH,KAAKC,MAAMZ,SAASK,QAC1Ba,gBAAiBP,KAAKC,MAAMZ,SAASI,eAAec,gBACpDC,aAAcR,KAAKC,MAAMZ,SAASI,eAAee,aACjDC,WAAYT,KAAKC,MAAMZ,SAASI,eAAegB,WAC/CC,YAAaV,KAAKC,MAAMZ,SAASI,eAAeiB,YAChDC,iBAAkBX,KAAKC,MAAMZ,SAASI,eAAekB,oBAG7DC,QAASZ,KAAKC,MAAMZ,SAASI,eAAemB,aAG5CC,YAAcC,eAAQC,SAASxC,IAChByC,MAAfH,aACAA,YAAYI,cAGZH,eAAQtC,SAASC,eAAeF,IAAKuB,uBACjCoB,SAASC,KAAKC,KAAO,kBACrBF,SAASG,SAAW"}