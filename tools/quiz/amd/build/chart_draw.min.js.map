{"version":3,"file":"chart_draw.min.js","sources":["../src/chart_draw.js"],"sourcesContent":["import ChartJS from 'mootimetertool_quiz/chart.umd';\nimport { call as fetchMany } from 'core/ajax';\n\nexport const init = () => {\n\n    // var labels = document.getElementById('mtmt_quiz_canvas').dataset.labels;\n    // var values = document.getElementById('mtmt_quiz_canvas').dataset.values;\n    // var charttype = document.getElementById('mtmt_quiz_canvas').dataset.charttype;\n\n    var pageid = document.getElementById('mtmt_quiz_canvas').dataset.pageid;\n\n\n\n    setInterval(function () {\n        var lastposttimestamp = parseInt(document.getElementById('mootimeterstate').dataset.lastupdated);\n        getAnswers(pageid, lastposttimestamp);\n    }, 1000);\n};\n\n\n/**\n * Execute the ajax call to get the aswers and more important data.\n * @param {int} pageid\n * @returns\n */\nconst execGetAnswers = (\n    pageid,\n) => fetchMany([{\n    methodname: 'mootimetertool_quiz_get_answers',\n    args: {\n        pageid,\n    },\n}])[0];\n\n/**\n * Get the answers and other important data, as well as processing them.\n * @param {int} pageid\n * @param {int} lastposttimestamp\n * @returns\n */\nconst getAnswers = async (pageid, lastposttimestamp) => {\n    const response = await execGetAnswers(pageid);\n\n    // We do not want to do anything if nothing has changed.\n    if (\n        lastposttimestamp == response.lastupdated\n        &&\n        response.chartsettings == document.getElementById('mtmt_quiz_canvas').dataset.chartsettings\n        &&\n        response.values == document.getElementById('mtmt_quiz_canvas').dataset.values\n        &&\n        response.labels == document.getElementById('mtmt_quiz_canvas').dataset.labels\n    ) {\n        return;\n    }\n\n    window.console.log(document.getElementById('mtmt_quiz_canvas').dataset.values);\n    window.console.log(response.values);\n\n    // Write the new data to the canvas data attributes.\n    let nodelastupdated = document.getElementById('mootimeterstate');\n    nodelastupdated.setAttribute('data-lastupdated', response.lastupdated);\n\n    let nodecanvas = document.getElementById('mtmt_quiz_canvas');\n    nodecanvas.setAttribute('data-labels', response.labels);\n    nodecanvas.setAttribute('data-values', response.values);\n    nodecanvas.setAttribute('data-chartsettings', response.chartsettings);\n\n    window.console.log(response);\n\n    // (Re-)Draw the chart.\n    var config = {\n        type: JSON.parse(response.chartsettings).charttype,\n        data: {\n            labels: JSON.parse(response.labels),\n            datasets: [{\n                label: response.question,\n                data: JSON.parse(response.values),\n                backgroundColor: JSON.parse(response.chartsettings).backgroundColor,\n                borderRadius: JSON.parse(response.chartsettings).borderRadius,\n                pointStyle: JSON.parse(response.chartsettings).pointStyle,\n                pointRadius: JSON.parse(response.chartsettings).pointRadius,\n                pointHoverRadius: JSON.parse(response.chartsettings).pointHoverRadius,\n            }]\n        },\n        options: JSON.parse(response.chartsettings).options\n    };\n\n    let chartStatus = ChartJS.getChart(\"mtmt_quiz_canvas\"); // <canvas> id\n    if (chartStatus != undefined) {\n        chartStatus.destroy();\n    }\n\n    new ChartJS(document.getElementById('mtmt_quiz_canvas'), config);\n    ChartJS.defaults.font.size = 25;\n    ChartJS.defaults.stepSize = 1;\n};"],"names":["pageid","document","getElementById","dataset","setInterval","lastposttimestamp","parseInt","lastupdated","getAnswers","async","response","methodname","args","execGetAnswers","chartsettings","values","labels","window","console","log","setAttribute","nodecanvas","config","type","JSON","parse","charttype","data","datasets","label","question","backgroundColor","borderRadius","pointStyle","pointRadius","pointHoverRadius","options","chartStatus","ChartJS","getChart","undefined","destroy","defaults","font","size","stepSize"],"mappings":"0RAGoB,SAMZA,OAASC,SAASC,eAAe,oBAAoBC,QAAQH,OAIjEI,aAAY,eACJC,kBAAoBC,SAASL,SAASC,eAAe,mBAAmBC,QAAQI,aACpFC,WAAWR,OAAQK,qBACpB,YAwBDG,WAAaC,MAAOT,OAAQK,2BACxBK,cAfNV,CAAAA,SACC,cAAU,CAAC,CACZW,WAAY,kCACZC,KAAM,CACFZ,OAAAA,WAEJ,GASuBa,CAAeb,WAIlCK,mBAAqBK,SAASH,aAE9BG,SAASI,eAAiBb,SAASC,eAAe,oBAAoBC,QAAQW,eAE9EJ,SAASK,QAAUd,SAASC,eAAe,oBAAoBC,QAAQY,QAEvEL,SAASM,QAAUf,SAASC,eAAe,oBAAoBC,QAAQa,cAK3EC,OAAOC,QAAQC,IAAIlB,SAASC,eAAe,oBAAoBC,QAAQY,QACvEE,OAAOC,QAAQC,IAAIT,SAASK,QAGNd,SAASC,eAAe,mBAC9BkB,aAAa,mBAAoBV,SAASH,iBAEtDc,WAAapB,SAASC,eAAe,oBACzCmB,WAAWD,aAAa,cAAeV,SAASM,QAChDK,WAAWD,aAAa,cAAeV,SAASK,QAChDM,WAAWD,aAAa,qBAAsBV,SAASI,eAEvDG,OAAOC,QAAQC,IAAIT,cAGfY,OAAS,CACTC,KAAMC,KAAKC,MAAMf,SAASI,eAAeY,UACzCC,KAAM,CACFX,OAAQQ,KAAKC,MAAMf,SAASM,QAC5BY,SAAU,CAAC,CACPC,MAAOnB,SAASoB,SAChBH,KAAMH,KAAKC,MAAMf,SAASK,QAC1BgB,gBAAiBP,KAAKC,MAAMf,SAASI,eAAeiB,gBACpDC,aAAcR,KAAKC,MAAMf,SAASI,eAAekB,aACjDC,WAAYT,KAAKC,MAAMf,SAASI,eAAemB,WAC/CC,YAAaV,KAAKC,MAAMf,SAASI,eAAeoB,YAChDC,iBAAkBX,KAAKC,MAAMf,SAASI,eAAeqB,oBAG7DC,QAASZ,KAAKC,MAAMf,SAASI,eAAesB,aAG5CC,YAAcC,eAAQC,SAAS,oBAChBC,MAAfH,aACAA,YAAYI,cAGZH,eAAQrC,SAASC,eAAe,oBAAqBoB,uBACjDoB,SAASC,KAAKC,KAAO,kBACrBF,SAASG,SAAW"}