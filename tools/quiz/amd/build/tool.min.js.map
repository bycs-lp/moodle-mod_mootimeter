{"version":3,"file":"tool.min.js","sources":["../src/tool.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport Ajax from 'core/ajax';\nimport SuperTool from \"mod_mootimeter/tool\";\nimport notification from \"core/notification\";\nimport Templates from 'core/templates';\nimport {ToolManager} from \"mod_mootimeter/toolmanager\";\nimport ChartJS from 'core/chartjs';\nimport * as Util from \"mod_mootimeter/util\";\n\n/**\n * Super class for tools.\n *\n * @module     mootimetertool_quiz/tool\n * @copyright  2023 Justus Dieckmann WWU\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nexport default class Tool extends SuperTool {\n\n    /**\n     * Renders a page.\n     *\n     * @return {Promise<HTMLElement>}\n     */\n    async render() {\n        Templates.prefetchTemplates(['mootimetertool_quiz/view_content']);\n        const page = this.page;\n\n        const answeroptions = await Ajax.call([{\n            methodname: 'mootimetertool_quiz_get_answeroptions',\n            args: {\n                pageid: page.id,\n            },\n            fail: notification.exception,\n        }])[0];\n\n        const context = {\n            'question_text': page.question,\n            'pageid': page.id,\n            'ispoll': page.config.ispoll === '1',\n            'isquiz': page.config.ispoll !== '1',\n            'answer_options': answeroptions.map((option) => {\n                return {\n                    'aoid': option.id,\n                    'ao_text': option.optiontext,\n                    'ao_iscorrect': option.optioniscorrect,\n                };\n            }),\n            'isediting': this.isEditing\n        };\n\n        const element = await Util.renderTemplate('mootimetertool_quiz/view_content', context);\n\n        if (!this.isEditing) {\n            // Store data on click thing.\n            element.querySelectorAll(\".mtmt_answeroption\").forEach(answerOptionEl => {\n                answerOptionEl.onclick = async() => {\n                    await Ajax.call([{\n                        methodname: 'mootimetertool_quiz_store_answer',\n                        args: {\n                            pageid: page.id,\n                            aoid: answerOptionEl.dataset.aoid,\n                        },\n                        fail: notification.exception,\n                    }])[0];\n\n                    ToolManager.route(page.id, true);\n                };\n            });\n        }\n        if (this.isEditing) {\n            this.saveAnswerOptionTextsWhenChanged(element.firstElementChild);\n            this.addNewAnswerOptionOnButtonClick(element.firstElementChild);\n        }\n\n        return element;\n    }\n\n    saveAnswerOptionTextsWhenChanged(element) {\n        element.addEventListener('blur', (e) => {\n            if (e.target.matches('textarea.mtmt-delayed-store')) {\n                const aoid = e.target.closest('[data-aoid]').dataset.aoid;\n                Ajax.call([{\n                    methodname: 'mootimetertool_quiz_store_answeroption',\n                    args: {\n                        aoid: aoid,\n                        value: e.target.value,\n                    },\n                    fail: notification.exception,\n                }]);\n            }\n        }, true);\n    }\n\n    addNewAnswerOptionOnButtonClick(element) {\n        Templates.prefetchTemplates(['mootimetertool_quiz/answer_option']);\n        const newAOButton = element.querySelector('#new_ao_label');\n        const questionElements = element.querySelector('#mtmt_questions');\n\n        newAOButton.onclick = async() => {\n            const result = await Ajax.call([{\n                methodname: 'mootimetertool_quiz_new_answeroption',\n                args: {\n                    pageid: this.page.id,\n                },\n                fail: notification.exception,\n            }])[0];\n\n            const element = await this.renderTemplate('mootimetertool_quiz/answer_option', {\n                aoid: result.aoid,\n                isediting: true,\n                ispoll: this.isPoll(),\n                isquiz: !this.isPoll()\n            });\n\n            questionElements.append(...element.children);\n        };\n    }\n\n    isPoll() {\n        return this.page.config.ispoll === '1';\n    }\n\n    async renderResult() {\n        Templates.prefetchTemplates(['mootimetertool_quiz/view_results']);\n        const page = this.page;\n\n        const ajax = Ajax.call([{\n            methodname: 'mootimetertool_quiz_get_answeroptions',\n            args: {\n                pageid: page.id,\n            },\n            fail: notification.exception,\n        }, {\n            methodname: 'mootimetertool_quiz_get_answers',\n            args: {\n                pageid: page.id,\n            },\n            fail: notification.exception,\n        }]);\n\n        const answeroptions = await ajax[0];\n        const answers = await ajax[1];\n\n        const data = {\n            labels: [],\n            datasets: [{\n                label: page.question,\n                data: []\n            }]\n        };\n\n        const answermapping = {};\n\n        for (let i = 0; i < answeroptions.length; i++) {\n            data.labels.push(answeroptions[i].optiontext);\n            answermapping[answeroptions[i].id] = i;\n        }\n\n        data.datasets[0].data = new Array(data.labels.length);\n\n        for (const answer of answers.answerlist) {\n            data.datasets[0].data[answermapping[answer.optionid]] = answer.count;\n        }\n\n        const element = await this.renderTemplate('mootimetertool_quiz/view_results', {});\n\n        const canvas = element.querySelector('#quizcanvas');\n\n        const chart = new ChartJS(canvas, {\n            type: 'bar',\n            data: data,\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n            }\n        });\n\n        chart.update();\n\n        return element;\n    }\n}\n"],"names":["Tool","SuperTool","prefetchTemplates","page","this","answeroptions","Ajax","call","methodname","args","pageid","id","fail","notification","exception","context","question","config","ispoll","map","option","optiontext","optioniscorrect","isEditing","element","Util","renderTemplate","querySelectorAll","forEach","answerOptionEl","onclick","async","aoid","dataset","route","saveAnswerOptionTextsWhenChanged","firstElementChild","addNewAnswerOptionOnButtonClick","addEventListener","e","target","matches","closest","value","newAOButton","querySelector","questionElements","result","isediting","isPoll","isquiz","append","children","ajax","answers","data","labels","datasets","label","answermapping","i","length","push","Array","answer","answerlist","optionid","count","canvas","ChartJS","type","options","responsive","maintainAspectRatio","update"],"mappings":";;;;;;;u8BA8BqBA,aAAaC,gDAQhBC,kBAAkB,CAAC,2CACvBC,KAAOC,KAAKD,KAEZE,oBAAsBC,cAAKC,KAAK,CAAC,CACnCC,WAAY,wCACZC,KAAM,CACFC,OAAQP,KAAKQ,IAEjBC,KAAMC,sBAAaC,aACnB,GAEEC,QAAU,eACKZ,KAAKa,gBACZb,KAAKQ,UACkB,MAAvBR,KAAKc,OAAOC,cACW,MAAvBf,KAAKc,OAAOC,sBACJb,cAAcc,KAAKC,SAC1B,MACKA,OAAOT,WACJS,OAAOC,wBACFD,OAAOE,8BAGlBlB,KAAKmB,WAGhBC,cAAgBC,KAAKC,eAAe,mCAAoCX,gBAEzEX,KAAKmB,WAENC,QAAQG,iBAAiB,sBAAsBC,SAAQC,iBACnDA,eAAeC,QAAUC,gBACfzB,cAAKC,KAAK,CAAC,CACbC,WAAY,mCACZC,KAAM,CACFC,OAAQP,KAAKQ,GACbqB,KAAMH,eAAeI,QAAQD,MAEjCpB,KAAMC,sBAAaC,aACnB,4BAEQoB,MAAM/B,KAAKQ,IAAI,OAInCP,KAAKmB,iBACAY,iCAAiCX,QAAQY,wBACzCC,gCAAgCb,QAAQY,oBAG1CZ,QAGXW,iCAAiCX,SAC7BA,QAAQc,iBAAiB,QAASC,OAC1BA,EAAEC,OAAOC,QAAQ,+BAAgC,OAC3CT,KAAOO,EAAEC,OAAOE,QAAQ,eAAeT,QAAQD,mBAChDzB,KAAK,CAAC,CACPC,WAAY,yCACZC,KAAM,CACFuB,KAAMA,KACNW,MAAOJ,EAAEC,OAAOG,OAEpB/B,KAAMC,sBAAaC,iBAG5B,GAGPuB,gCAAgCb,4BAClBtB,kBAAkB,CAAC,4CACvB0C,YAAcpB,QAAQqB,cAAc,iBACpCC,iBAAmBtB,QAAQqB,cAAc,mBAE/CD,YAAYd,QAAUC,gBACZgB,aAAezC,cAAKC,KAAK,CAAC,CAC5BC,WAAY,uCACZC,KAAM,CACFC,OAAQN,KAAKD,KAAKQ,IAEtBC,KAAMC,sBAAaC,aACnB,GAEEU,cAAgBpB,KAAKsB,eAAe,oCAAqC,CAC3EM,KAAMe,OAAOf,KACbgB,WAAW,EACX9B,OAAQd,KAAK6C,SACbC,QAAS9C,KAAK6C,WAGlBH,iBAAiBK,UAAU3B,QAAQ4B,WAI3CH,eACuC,MAA5B7C,KAAKD,KAAKc,OAAOC,+CAIdhB,kBAAkB,CAAC,2CACvBC,KAAOC,KAAKD,KAEZkD,KAAO/C,cAAKC,KAAK,CAAC,CACpBC,WAAY,wCACZC,KAAM,CACFC,OAAQP,KAAKQ,IAEjBC,KAAMC,sBAAaC,WACpB,CACCN,WAAY,kCACZC,KAAM,CACFC,OAAQP,KAAKQ,IAEjBC,KAAMC,sBAAaC,aAGjBT,oBAAsBgD,KAAK,GAC3BC,cAAgBD,KAAK,GAErBE,KAAO,CACTC,OAAQ,GACRC,SAAU,CAAC,CACPC,MAAOvD,KAAKa,SACZuC,KAAM,MAIRI,cAAgB,OAEjB,IAAIC,EAAI,EAAGA,EAAIvD,cAAcwD,OAAQD,IACtCL,KAAKC,OAAOM,KAAKzD,cAAcuD,GAAGvC,YAClCsC,cAActD,cAAcuD,GAAGjD,IAAMiD,EAGzCL,KAAKE,SAAS,GAAGF,KAAO,IAAIQ,MAAMR,KAAKC,OAAOK,YAEzC,MAAMG,UAAUV,QAAQW,WACzBV,KAAKE,SAAS,GAAGF,KAAKI,cAAcK,OAAOE,WAAaF,OAAOG,YAG7D3C,cAAgBpB,KAAKsB,eAAe,mCAAoC,IAExE0C,OAAS5C,QAAQqB,cAAc,sBAEvB,IAAIwB,iBAAQD,OAAQ,CAC9BE,KAAM,MACNf,KAAMA,KACNgB,QAAS,CACLC,YAAY,EACZC,qBAAqB,KAIvBC,SAEClD"}