{"version":3,"file":"redraw_wordcloud.min.js","sources":["../src/redraw_wordcloud.js"],"sourcesContent":["import {call as fetchMany} from 'core/ajax';\nimport WordCloud from 'mootimetertool_wordcloud/wordcloud2';\n\nexport const init = (id) => {\n\n    if (!document.getElementById(id)) {\n        return;\n    }\n\n    // Initially getAnswers.\n    getAnswers(id);\n\n    var interval = setInterval(() => {\n        getAnswers(id);\n        if (!document.getElementById(id)) {\n            clearInterval(interval);\n        }\n    }, document.getElementById('mootimeterstate').dataset.refreshinterval);\n};\n\n/**\n * Call to get all answers\n * @param {int} pageid\n * @param {int} lastupdated\n * @returns {array}\n */\nconst execGetAnswers = (\n    pageid,\n    lastupdated\n) => fetchMany([{\n    methodname: 'mootimetertool_wordcloud_get_answers',\n    args: {\n        pageid,\n        lastupdated\n    },\n}])[0];\n\n/**\n * Executes the call to get all answers.\n *\n * @param {string} id\n * @returns {mixed}\n */\nconst getAnswers = async(id) => {\n\n    if (!document.getElementById(id)) {\n        return;\n    }\n\n    var pageid = document.getElementById(id).dataset.pageid;\n\n    var lastposttimestamp = 0;\n    if (document.getElementById('mootimeterstate').dataset.lastupdated) {\n       lastposttimestamp = document.getElementById('mootimeterstate').dataset.lastupdated;\n    }\n\n    const response = await execGetAnswers(pageid, lastposttimestamp);\n\n    if (\n        response.lastupdated == lastposttimestamp\n        &&\n        JSON.stringify(response.answerlist) == document.getElementById(id).dataset.answers\n    ) {\n        return;\n    }\n\n    // Set lastupdated.\n    let nodelastupdated = document.getElementById('mootimeterstate');\n    nodelastupdated.setAttribute('data-lastupdated', response.lastupdated);\n\n    // Redraw wordcloud.\n    document.getElementById(id).setAttribute('data-answers', JSON.stringify(response.answerlist));\n    redrawwordcloud(id);\n\n    return;\n};\n\n/**\n * Redraw the wordcloud.\n * @param {string} id\n */\nfunction redrawwordcloud(id) {\n    let mtmtcanvas = document.getElementById(id);\n    let answers = JSON.parse(mtmtcanvas.dataset.answers);\n\n    WordCloud(mtmtcanvas, {list: answers, weightFactor: 24, color: '#f98012', fontFamily: 'OpenSans'});\n}\n"],"names":["id","document","getElementById","getAnswers","interval","setInterval","clearInterval","dataset","refreshinterval","async","pageid","lastposttimestamp","lastupdated","response","methodname","args","execGetAnswers","JSON","stringify","answerlist","answers","setAttribute","mtmtcanvas","parse","list","weightFactor","color","fontFamily","redrawwordcloud"],"mappings":"uTAGqBA,QAEZC,SAASC,eAAeF,KAK7BG,WAAWH,QAEPI,SAAWC,aAAY,KACvBF,WAAWH,IACNC,SAASC,eAAeF,KACzBM,cAAcF,YAEnBH,SAASC,eAAe,mBAAmBK,QAAQC,yBA0BpDL,WAAaM,MAAAA,SAEVR,SAASC,eAAeF,eAIzBU,OAAST,SAASC,eAAeF,IAAIO,QAAQG,OAE7CC,kBAAoB,EACpBV,SAASC,eAAe,mBAAmBK,QAAQK,cACpDD,kBAAoBV,SAASC,eAAe,mBAAmBK,QAAQK,mBAGpEC,cA9Ba,EACnBH,OACAE,eACC,cAAU,CAAC,CACZE,WAAY,uCACZC,KAAM,CACFL,OAAAA,OACAE,YAAAA,gBAEJ,GAqBuBI,CAAeN,OAAQC,sBAG1CE,SAASD,aAAeD,mBAExBM,KAAKC,UAAUL,SAASM,aAAelB,SAASC,eAAeF,IAAIO,QAAQa,eAMzDnB,SAASC,eAAe,mBAC9BmB,aAAa,mBAAoBR,SAASD,aAG1DX,SAASC,eAAeF,IAAIqB,aAAa,eAAgBJ,KAAKC,UAAUL,SAASM,sBAU5DnB,QACjBsB,WAAarB,SAASC,eAAeF,IACrCoB,QAAUH,KAAKM,MAAMD,WAAWf,QAAQa,gCAElCE,WAAY,CAACE,KAAMJ,QAASK,aAAc,GAAIC,MAAO,UAAWC,WAAY,aAbtFC,CAAgB5B"}