{"version":3,"file":"redraw_wordcloud.min.js","sources":["../src/redraw_wordcloud.js"],"sourcesContent":["import { call as fetchMany } from 'core/ajax';\nimport WordCloud from 'mootimetertool_wordcloud/wordcloud2';\n\nexport const init = (id) => {\n\n    if (!document.getElementById(id)) {\n        return;\n    }\n\n    // Initially getAnswers.\n    getAnswersAsync(id);\n\n    setTimeout(() => {\n        const intervalms = document.getElementById('mootimeterstate').dataset.refreshinterval;\n        const interval = setInterval(() => {\n            if (!document.getElementById(id)) {\n                clearInterval(interval);\n                return;\n            }\n            getAnswers(id);\n        }, intervalms);\n    }, 2000);\n\n    const mtmstate = document.getElementById('mootimeterstate');\n    mtmstate.setAttribute('data-wclastupdated', 0);\n};\n\n/**\n * This is because the execution should be finished befor proceeding.\n * @param {string} id\n */\nasync function getAnswersAsync(id) {\n    await getAnswers(id);\n}\n\n/**\n * Call to get all answers\n * @param {int} pageid\n * @param {int} lastupdated\n * @returns {array}\n */\nconst execGetAnswers = (\n    pageid,\n    lastupdated\n) => fetchMany([{\n    methodname: 'mootimetertool_wordcloud_get_answers',\n    args: {\n        pageid,\n        lastupdated\n    },\n}])[0];\n\n/**\n * Executes the call to get all answers.\n *\n * @param {string} id\n * @returns {mixed}\n */\nconst getAnswers = async (id) => {\n\n    if (!document.getElementById(id)) {\n        return;\n    }\n\n    var pageid = document.getElementById(id).dataset.pageid;\n\n    const mtmstate = document.getElementById('mootimeterstate');\n\n    // Early exit if there are no changes.\n    if (mtmstate.dataset.wclastupdated && mtmstate.dataset.wclastupdated == mtmstate.dataset.contentchangedat) {\n        return;\n    }\n\n    // Get the answer list.\n    const response = await execGetAnswers(pageid);\n\n    // Set wclastupdated.\n    mtmstate.setAttribute('data-wclastupdated', mtmstate.dataset.contentchangedat);\n\n    // Redraw wordcloud.\n    document.getElementById(id).setAttribute('data-answers', JSON.stringify(response.answerlist));\n    redrawwordcloud(id);\n\n    return;\n};\n\n/**\n * Redraw the wordcloud.\n * @param {string} id\n */\nfunction redrawwordcloud(id) {\n    let mtmtcanvas = document.getElementById(id);\n    let answers = JSON.parse(mtmtcanvas.dataset.answers);\n\n    WordCloud(mtmtcanvas, { list: answers, weightFactor: 24, color: '#f98012', fontFamily: 'OpenSans' });\n}\n"],"names":["id","document","getElementById","getAnswers","getAnswersAsync","setTimeout","intervalms","dataset","refreshinterval","interval","setInterval","clearInterval","setAttribute","async","pageid","mtmstate","wclastupdated","contentchangedat","response","lastupdated","methodname","args","execGetAnswers","JSON","stringify","answerlist","mtmtcanvas","answers","parse","list","weightFactor","color","fontFamily","redrawwordcloud"],"mappings":"uTAGqBA,SAEZC,SAASC,eAAeF,2BA0BFA,UACrBG,WAAWH,IAtBjBI,CAAgBJ,IAEhBK,YAAW,WACDC,WAAaL,SAASC,eAAe,mBAAmBK,QAAQC,gBAChEC,SAAWC,aAAY,KACpBT,SAASC,eAAeF,IAI7BG,WAAWH,IAHPW,cAAcF,YAInBH,cACJ,KAEcL,SAASC,eAAe,mBAChCU,aAAa,qBAAsB,UAkC1CT,WAAaU,MAAAA,SAEVZ,SAASC,eAAeF,eAIzBc,OAASb,SAASC,eAAeF,IAAIO,QAAQO,aAE3CC,SAAWd,SAASC,eAAe,sBAGrCa,SAASR,QAAQS,eAAiBD,SAASR,QAAQS,eAAiBD,SAASR,QAAQU,8BAKnFC,cAjCa,EACnBJ,OACAK,eACC,cAAU,CAAC,CACZC,WAAY,uCACZC,KAAM,CACFP,OAAAA,OACAK,YAAAA,gBAEJ,GAwBuBG,CAAeR,QAGtCC,SAASH,aAAa,qBAAsBG,SAASR,QAAQU,kBAG7DhB,SAASC,eAAeF,IAAIY,aAAa,eAAgBW,KAAKC,UAAUN,SAASO,sBAU5DzB,QACjB0B,WAAazB,SAASC,eAAeF,IACrC2B,QAAUJ,KAAKK,MAAMF,WAAWnB,QAAQoB,gCAElCD,WAAY,CAAEG,KAAMF,QAASG,aAAc,GAAIC,MAAO,UAAWC,WAAY,aAbvFC,CAAgBjC"}