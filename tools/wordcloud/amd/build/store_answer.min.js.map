{"version":3,"file":"store_answer.min.js","sources":["../src/store_answer.js"],"sourcesContent":["import {call as fetchMany} from 'core/ajax';\nimport {execReloadPage as reloadPage} from 'mod_mootimeter/reload_page';\nimport {renderInfoBox} from 'mod_mootimeter/utils';\nimport {removeInfoBox} from 'mod_mootimeter/utils';\n\nexport const init = (inputid, enterid) => {\n\n    // Register event to input box.\n    const ao = document.getElementById(inputid);\n    if (ao) {\n        ao.addEventListener(\"keyup\", function(event) {\n            if (event.code === 'Enter' || event.code === 'NumpadEnter') {\n                store(inputid);\n            }\n        });\n    }\n\n    // Register event to submit button.\n    const ae = document.getElementById(enterid);\n    if (ae) {\n        ae.addEventListener(\"click\", function() {\n            store(inputid);\n        });\n    }\n\n    /**\n     * Create new page.\n     * @param {string} inputid\n     */\n    function store(inputid) {\n        var pageid = document.getElementById(inputid).dataset.pageid;\n        var answer = document.getElementById(inputid).value;\n        storeAnswer(pageid, answer, inputid);\n    }\n};\n\n/**\n * Call to store an answer\n * @param {int} pageid\n * @param {string} answer\n * @returns {array}\n */\nconst execStoreAnswer = (\n    pageid,\n    answer,\n) => fetchMany([{\n    methodname: 'mootimetertool_wordcloud_store_answer',\n    args: {\n        pageid,\n        answer\n    },\n}])[0];\n\n/**\n * Executes the call to store an answer.\n * @param {int} pageid\n * @param {string} answer\n * @param {string} inputid\n */\nconst storeAnswer = async(pageid, answer, inputid) => {\n    const response = await execStoreAnswer(pageid, answer);\n\n    const infoboxid = \"mtmt_answer_warning\";\n\n    removeInfoBox(infoboxid);\n\n    if (response.code == 1000 || response.code == 1001 || response.code == 1002) {\n        renderInfoBox(\"mtmt_tool-colct-header\", infoboxid, \"warning\", response.string);\n    }\n\n    if (response.code == 200) {\n        const queryString = window.location.search;\n        const urlParams = new URLSearchParams(queryString);\n        reloadPage(urlParams.get('pageid'), urlParams.get('id'));\n    }\n\n    // In any case: Empty the input field after post.\n    document.getElementById(inputid).value = \"\";\n};\n"],"names":["inputid","enterid","ao","document","getElementById","addEventListener","event","code","store","ae","pageid","dataset","answer","value","storeAnswer","async","response","methodname","args","execStoreAnswer","string","queryString","window","location","search","urlParams","URLSearchParams","get"],"mappings":"oQAKoB,CAACA,QAASC,iBAGpBC,GAAKC,SAASC,eAAeJ,SAC/BE,IACAA,GAAGG,iBAAiB,SAAS,SAASC,OACf,UAAfA,MAAMC,MAAmC,gBAAfD,MAAMC,MAChCC,MAAMR,kBAMZS,GAAKN,SAASC,eAAeH,kBAW1BO,MAAMR,aACPU,OAASP,SAASC,eAAeJ,SAASW,QAAQD,OAClDE,OAAST,SAASC,eAAeJ,SAASa,MAC9CC,YAAYJ,OAAQE,OAAQZ,SAb5BS,IACAA,GAAGJ,iBAAiB,SAAS,WACzBG,MAAMR,mBAsCZc,YAAcC,MAAML,OAAQE,OAAQZ,iBAChCgB,cAlBc,EACpBN,OACAE,UACC,cAAU,CAAC,CACZK,WAAY,wCACZC,KAAM,CACFR,OAAAA,OACAE,OAAAA,WAEJ,GASuBO,CAAgBT,OAAQE,oCAE7B,uBAIG,KAAjBI,SAAST,MAAiC,MAAjBS,SAAST,MAAiC,MAAjBS,SAAST,+BAC7C,yBALA,sBAKqC,UAAWS,SAASI,QAGtD,KAAjBJ,SAAST,KAAa,OAChBc,YAAcC,OAAOC,SAASC,OAC9BC,UAAY,IAAIC,gBAAgBL,6CAC3BI,UAAUE,IAAI,UAAWF,UAAUE,IAAI,OAItDxB,SAASC,eAAeJ,SAASa,MAAQ"}