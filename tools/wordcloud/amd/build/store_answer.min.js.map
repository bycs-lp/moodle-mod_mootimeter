{"version":3,"file":"store_answer.min.js","sources":["../src/store_answer.js"],"sourcesContent":["import Ajax from 'core/ajax';\nimport { exception as displayException } from 'core/notification';\nimport Templates from 'core/templates';\nimport notification from 'core/notification';\n\nexport const init = () => {\n\n    // Register event to input box.\n    document.getElementById('mootimeter_type_answer').addEventListener(\"keyup\", function (event) {\n        if (event.code === 'Enter' || event.code === 'NumpadEnter') {\n            storeAnswer();\n        }\n    });\n    document.getElementById('mootimeter_enter_answer').addEventListener(\"click\", function () {\n        storeAnswer();\n    });\n\n    /**\n    * Store the Answer\n    */\n    function storeAnswer() {\n        var pageid = document.getElementById('mootimeter_type_answer').dataset.pageid;\n        var answer = document.getElementById('mootimeter_type_answer').value;\n\n        const context = {\n            pill: answer,\n            additional_class: 'mootimeter-pill-inline'\n        };\n\n        // Add the answer to the Badges list.\n        Templates.renderForPromise('mod_mootimeter/elements/snippet_pill', context)\n            .then(({ html, js }) => {\n                Templates.appendNodeContents('#mtmt_wordcloud_pills', html, js);\n                return true;\n            })\n            .catch((error) => displayException(error));\n\n        // Send the answer to server.\n        Ajax.call([{\n            methodname: 'mootimetertool_wordcloud_store_answer',\n            args: { pageid: pageid, answer: answer },\n            fail: notification.exception,\n        }]);\n\n        // Empty the input field after post.\n        document.getElementById('mootimeter_type_answer').value = \"\";\n\n        return;\n    }\n};\n"],"names":["storeAnswer","pageid","document","getElementById","dataset","answer","value","context","pill","additional_class","renderForPromise","then","_ref","html","js","appendNodeContents","catch","error","call","methodname","args","fail","notification","exception","addEventListener","event","code"],"mappings":"21CAKoB,cAePA,kBACDC,OAASC,SAASC,eAAe,0BAA0BC,QAAQH,OACnEI,OAASH,SAASC,eAAe,0BAA0BG,YAEzDC,QAAU,CACZC,KAAMH,OACNI,iBAAkB,6CAIZC,iBAAiB,uCAAwCH,SAC9DI,MAAKC,WAACC,KAAEA,KAAFC,GAAQA,mCACDC,mBAAmB,wBAAyBF,KAAMC,KACrD,KAEVE,OAAOC,QAAU,2BAAiBA,uBAGlCC,KAAK,CAAC,CACPC,WAAY,wCACZC,KAAM,CAAEnB,OAAQA,OAAQI,OAAQA,QAChCgB,KAAMC,sBAAaC,aAIvBrB,SAASC,eAAe,0BAA0BG,MAAQ,GArC9DJ,SAASC,eAAe,0BAA0BqB,iBAAiB,SAAS,SAAUC,OAC/D,UAAfA,MAAMC,MAAmC,gBAAfD,MAAMC,MAChC1B,iBAGRE,SAASC,eAAe,2BAA2BqB,iBAAiB,SAAS,WACzExB"}